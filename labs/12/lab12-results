Script started on 2022-04-06 13:37:13-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="123" LINES="24"]
]0;jav86@gold30: ~/CS214/labs/12/ada[01;32mjav86@gold30[00m:[01;34m~/CS214/labs/12/ada[00m$ cat tasked_array_sum.adb
-- array_sum.adb sums the values from an input file using an array.
--
-- Begun by: Prof. Adams, for CS 214 at Calvin College.
-- Completed by: Justin Voss
-- Date: 04/07/22
--
-- Usage: array_sum <inFileName>
-------------------------------------------------------------------

with Ada.Text_IO,            -- string output
     Ada.Integer_Text_IO,    -- integer output
     Ada.Command_Line,       -- Argument()
     Ada.Real_Time;          -- Clock, Time, etc.

use  Ada.Text_IO, Ada.Integer_Text_IO, Ada.Real_Time;

procedure tasked_array_sum is

   package Long_IO is new Integer_IO(Long_Integer); use Long_IO;

   type Int_Array is array (Integer range <>) of Long_Integer;
   type Int_Array_Pointer is access Int_Array;

   Values: Int_Array_Pointer;
   Total:  Long_Integer;
   Start_Time, Stop_Time:  Ada.Real_Time.Time;
   Time_Required: Duration;

   task type Array_Adder_Task is 
      entry sum(ID, Slice_Size: in Integer);
      entry report(Result: out Long_Integer);
   end;

      -- Sum adds up the values in an array
   -- 
   -- Parameter: V, a pointer to an array of ints
   -- Return: the sum of the int values in V.
   --
   function Sum_Slice(V: in Int_Array_Pointer;
                        Start, Stop: in Integer) 
                        return Long_Integer is
      Partial_Sum: Long_Integer := 0;
   begin
         for i in Start..Stop loop
            Partial_Sum := Partial_Sum + V(i);
         end loop;
         return Partial_Sum;
   end Sum_Slice;

   task body Array_Adder_Task is
      My_Total : Long_Integer := 0;
      My_Start_Index, My_Stop_Index : Integer;
   begin
         accept sum(ID, Slice_Size: in Integer) do
            My_Start_Index := ID * Slice_Size;
            My_Stop_Index := My_Start_Index + Slice_Size - 1;
         end; 

         My_Total := Sum_Slice(Values, 
                                My_Start_Index,
                                My_Stop_Index);

         accept report(Result: out Long_Integer) do
            Result := My_Total;
         end; 
   end Array_Adder_Task;
   
   --
   -- check for command-line arguments
   --
   procedure Check_Command_Line is
   begin
      if Ada.Command_Line.Argument_Count /= 2 then
         New_line;
         Put("Usage: array_sum <inFileName> <numTasks>");
         New_line; New_line;
         Ada.Command_Line.Set_Exit_Status(1);
      end if;
   end Check_Command_Line;

   -- fill array with values from an input file
   -- Parameters: File_Name, a String
   --             V, a pointer to a dynamic array
   -- Precondition: File_Name is the name of a valid input file
   --            && its first line is the N, the number of
   --                (other) numbers in the file.
   -- Postcondition: V points to a dynamic array of length N
   --                 containing the N items from the input file.
   --
   procedure Read_File(File_Name: in String; V: in out Int_Array_Pointer) is
      Size:   Integer;
      Number_File : File_Type;
   begin
     Open(File => Number_File,
            Mode => In_File,
            Name => File_Name); 
      Get(Number_File, Size);
      V := new Int_Array(0..Size-1);
      for i in V'Range loop
         Get(Number_File, V(i));
      end loop;
   end Read_File;



   -- Output results
   -- Parameter: Result, the sum of the array's values
   --            Compute_Time, how long it took to sum them.
   -- Postcondition: Result and Compute_Time have been
   --                 displayed on the console.
   --
   procedure Display(Result: in Long_Integer; Compute_Time: in Duration) is
   begin
      New_line;
      Put("The sum is ");
      Put(Result);
      New_line;
      Put(" and computing it took "); 
      Put(Duration'Image (Compute_Time));
      Put(" secs.");
      New_line; New_line;
   end Display;

  -- Sums in parallel
   -- Parameter: Values, an Int_Array_Pointer, Num_Tasks, an integer
   -- Postcondition: Sums in parallel. Returns long integer
   --
   function Sum_In_Parallel(Values: in Int_Array_Pointer;
                            Num_Tasks: in Integer) return Long_Integer is
      Partial_Result, Result: Long_Integer := 0;
      Leftovers, Slice_Size, Start, Stop : Integer;

      type Task_Array is array(Integer range <>) of Array_Adder_Task;
      type Task_Array_Ptr is access Task_Array;
      Adder_Tasks : Task_Array_Ptr;

   begin
      Slice_Size := Values'Length / Num_Tasks;
      Adder_Tasks := new Task_Array(1..Num_Tasks-1);

      for task_ID in 1..NUM_TASKS-1 loop
         Adder_Tasks(task_ID).sum(task_ID, Slice_Size);
      end loop;

      Result := Sum_Slice(Values, 0, Slice_Size-1);

      Leftovers := Values'Length REM Num_Tasks;

      if ( Leftovers > 0 ) then
         Start := Values'Length - Leftovers;
         Stop := Values'Length - 1;
         for i in Start..Stop loop
            Result := Result + Values(i);
         end loop;
      end if;

      for task_ID in 1..Num_Tasks-1 loop
         Adder_Tasks(task_ID).report(Partial_Result);
         Result := Result + Partial_Result;
      end loop;

      return Result;
   end Sum_In_Parallel;


begin
   Check_Command_Line;
   Read_File( Ada.Command_Line.Argument(1), Values );
   Start_Time := Clock;
   Total := Sum_In_Parallel(Values,
                              Integer'Value( Ada.Command_Line.Argument(2) ) );
   Stop_Time := Clock;
   Time_Required := Ada.Real_Time.To_Duration(Stop_Time - Start_Time);
   Display(Total, Time_Required);
end tasked_array_sum;

]0;jav86@gold30: ~/CS214/labs/12/ada[01;32mjav86@gold30[00m:[01;34m~/CS214/labs/12/ada[00m$ gnatmake tasked_array_sum.adb
gnatmake: "tasked_array_sum" up to date.
]0;jav86@gold30: ~/CS214/labs/12/ada[01;32mjav86@gold30[00m:[01;34m~/CS214/labs/12/ada[00m$ gnatmake tasked_array_sum.adb[5Pcat tasked_array_sum.adbjava ThreadedArraySum /home/cs/214/labs/12/numbers/1000000numbers.txt 54321[1Pnumbers.txt 54321[1Pnumbers.txt 54321[1Pnumbers.txt 54321[3P5numbers.txt 54321[25Pc -deprecation ThreadedArraySum.java ThreadedArraySum /home/cs/214/labs/12/numbers/5numbers.txt 1[4PArraySum /home/cs/214/labs/12/numbers/1000000numbers.txt[1Pnumbers.txt[1Pnumbers.txt[1Pnumbers.txt[3P5numbers.txt[23Pc -deprecation ArraySum.java Sum /home/cs/214/labs/12/numbers/1000000numbers.txt[1Pnumbers.txt[1Pnumbers.txt[4P5numbers.txt[3@1000numbers.txt[1Phome/cs/214/labs/12/numbers/1000numbers.txt[2@./java Sum home/cs/214/labs/12/numbers/1000numbers.txt[30Pjava Sum 1000numbers.txt[11@../numbers/1000numbers.txt[K home/jav86/CS214/labs/12/java/5numbers.txt[1@cs/214/labs/12/numbers/1000numbers.txt[11P5numbers.txt[8@numbers/5numbers.txt[5Pcs/214/labs/12/numbers/5numbers.txt./java Sum[K cs/214/labs/12/numbers/5numbers.txt[4P Sum cs/214/labs/12/numbers/5numbers.txt[15Pjavac -deprecation Sum.javacd java[KCS214/labs/12[9P./shell[15@g++ *.cpp *.h -o shell./shell[Kcd CS214/labs/12java[K[20@javac -deprecation Sum.java./ Sum cs/214/labs/12/numbers/5numbers.txt[4@java Sum cs/214/labs/12/numbers/5numbers.txt[Kjava Sum cs/214/labs/12/numbers/5numbers.txt[5@home/cs/214/labs/12/numbers/5numbers.txt[8P5numbers.txt[11@numbers/1000numbers.txt[1Pjav86/CS214/labs/12/java/5numbers.txt[K ../numbers/1000numbers.txt[11P1000numbers.txt[30@./java Sum home/cs/214/labs/12/numbers/1000numbers.txt[2Pjava Sum home/cs/214/labs/12/numbers/1000numbers.txt[1@/home/cs/214/labs/12/numbers/1000numbers.txt[3P5numbers.txt[4@10000numbers.txt[1@0numbers.txt[1@0numbers.txt[24Pc -deprecation ArraySum.java ArraySum /home/cs/214/labs/12/numbers/5numbers.txt[3@1000numbers.txt[1@0numbers.txt[1@0numbers.txt[1@0numbers.txtThreadedArraySum /home/cs/214/labs/12/numbers/5numbers.txt 1[25Pc -deprecation ThreadedArraySum.java ThreadedArraySum /home/cs/214/labs/12/numbers/5numbers.txt 123451000numbers.txt 123u[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1P[1Pm[1P[1@t[1@a[1P[1P[1@.[1@/[1@t[1@a[1@s[1@k[1@e[1@d[1@_[1@a[1@r[1@r[1@a[1@y[1@_[1@s[1@u[1@m [1@  /home/cs/214/labs/12/numbers/1000numbers.txt 3 1

The sum is                50104
 and computing it took  0.000023919 secs.

]0;jav86@gold30: ~/CS214/labs/12/ada[01;32mjav86@gold30[00m:[01;34m~/CS214/labs/12/ada[00m$ [K./tasked_array_sum  /home/cs/214/labs/12/numbers/1000numbers.txt 1 44 1[1P[1P[1P[1@0[1@0[1@0[1@0[1@0[1@0

The sum is             50473230
 and computing it took  0.002102630 secs.

]0;jav86@gold30: ~/CS214/labs/12/ada[01;32mjav86@gold30[00m:[01;34m~/CS214/labs/12/ada[00m$ [K./tasked_array_sum  /home/cs/214/labs/12/numbers/1000000numbers.txt 1 4

The sum is             50473230
 and computing it took  0.000953366 secs.

]0;jav86@gold30: ~/CS214/labs/12/ada[01;32mjav86@gold30[00m:[01;34m~/CS214/labs/12/ada[00m$ [Kexit

Script done on 2022-04-06 13:39:05-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-04-06 13:43:28-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="123" LINES="24"]
]0;jav86@gold30: ~/CS214/labs/12/java[01;32mjav86@gold30[00m:[01;34m~/CS214/labs/12/java[00m$ cat ThreadedArraySum.java
/* ThreadedArraySum.java sums the integers in a file using an array.
 *
 * Usage: java -Xint ThreadedArraySum <fileName>
 *
 * Input: the name of the input file
 *         (entered on the command-line).
 * Precondition: the first line of the file is the number
 *                of (other) numbers in the file.
 * Output: the sum of the other numbers in the file
 *          and how long it took to compute that sum.
 *
 * Begun by: Prof. Adams for CS 214 at Calvin College.
 * Completed by: Justin Voss
 * Date: 04/07/22
 */

import java.util.Scanner;                   // convenient I/O
import java.io.File;                        // file I/O
import java.io.FileNotFoundException;       // file exception
import java.lang.System;                    // nanoTime()

public class ThreadedArraySum {

  public static void main(String [] args) {
     ThreadedArraySum me = new ThreadedArraySum(args);
     me.run();
  }

  // STILL HAVE TO ADD A DECLARAION OF myNumThreads SO THAT IT IS A PRIVATE INSTANCE VARIABLE OF YOUR CLASS

  /* constructor
   * @param: args, an array of Strings
   * Precondition: args.length == 1 &&
   *                args[0] is the name of an input file
   *                 whose first line is N, an integer
   *                 followed by a blank line
   *                 followed by N integers, one per line.
   * Postcondition: myScanner is a Scanner for that input file
   *             && myArray is an array containing the N ints.
   */
  public ThreadedArraySum(String [] args) {
     if (args.length < 1) {
        System.err.println("\n*** Usage: java Sum <fileName>\n");
        System.exit(1);
     }
     Scanner aScanner = openScanner( args[0] ); // open input file
     myArray = readFile(aScanner);              // fill array with values
     myNumThreads = getNumThreads( args );
  }


  /* utility to open / return a Scanner to a file 
   *   whose name comes from the command-line.
   * 
   * @param: fileName, a String
   * Precondition: fileName is the name of an input file.
   * Return: a Scanner for that input file.
   */
  private Scanner openScanner(String fileName) {
     Scanner in = null;
     try {
        File theFile = new File ( fileName );
        in = new Scanner( theFile );
     } catch ( FileNotFoundException  fnfe ) {
        System.err.println("\n*** Unable to open '" + fileName + "'\n");
        System.exit(1);
     }

     return in;
  }

  /* fill an array with values from a Scanner
   * @param: in, a Scanner to an input file.
   * Precondition: the first line of the input file is N,
   *                the number of (other) numbers in the file.
   * Postcondition: the N int values have been read
   *                 from 'in' and stored in an array.
   * Return: the array containing the N int values.
   */
  private int[] readFile(Scanner in) {
     int numNumbers = in.nextInt();           // read how many numbers
     int [] array = new int[numNumbers];      // allocate array
     for (int i = 0; i < array.length; i++) { // fill array
        array[i] = in.nextInt();              //   with numbers
     }
     in.close();                              // close input file
     return array;                            // we're done
  }

  /* how long does it take to process the values in myArray?
   * Precondition: myArray has been filled with N input values.
   * Output: the sum of the values in myArray
   *          and how long it took to compute that sum.
   */
  public void run() {
     long startTime = System.nanoTime();             // start timing
     long sum = sumArray(myArray);                    // sum the values
     long totalTime = System.nanoTime() - startTime; // stop timing
     
     System.out.println("\nThe sum of the " + myArray.length
                         + " numbers is: " + sum 
                         + "\n and summing them took " 
                         + totalTime + " time units.\n");
  }

  private class Helper extends Thread {

   public Helper(int id) {
     super();
     myID = id;
     myPartialSum = 0;
   }

   public void run() {
       myPartialSum = sumSlice(myID);
   }

   public final long getPartialSum() {
      return myPartialSum;
   }

   private int  myID = 0;
   private long myPartialSum = 0;
} // Helper

private long sumSlice(int id) {
   int sliceSize = myArray.length / myNumThreads;
   int start = id * sliceSize;         // starting index
   int stop = (id+1) * sliceSize;      // stopping index
   if ( id == myNumThreads-1 ) {       // have final thread
       stop = myArray.length;            //  handle leftovers
   } 
   long sliceSum = 0;
   for (int i = start; i < stop; ++i) {  // sum the ints
       sliceSum += myArray[i];           //  in my slice
   }
   return sliceSum;
}



  /* sum the values in an array
   * @param: arr, an array of integers
   * Return: the sum of the int values in arr.
   */
  private long sumArray(int[] arr) {
   Helper[] helpers = new Helper[myNumThreads];

   for (int i = 1; i < myNumThreads; ++i) {     // for each helper:
      helpers[i] = new Helper(i);                  //  create, and
      helpers[i].start();                          //  launch them
   }

   long sum = sumSlice(0);                         // main thread does slice 0

   try {
      for (int i = 1; i < myNumThreads; ++i) {  // for each helper h:
         helpers[i].join();                        //  wait for h to finish
         sum += helpers[i].getPartialSum();        //  get its partial sum
      }
   } catch( InterruptedException ie) {             // required by join()
      System.err.println("\n*** a Helper was interrupted!\n");
      System.err.println(ie);
      System.exit(1);
   }

   return sum;
}

  private int [] myArray = null;
  private int myNumThreads;

   private final int getNumThreads( String [] args ) {
      if (args.length >= 2) {
         return Integer.parseInt( args[1] );
      } else {
         return 1;
      }
   }  
}

]0;jav86@gold30: ~/CS214/labs/12/java[01;32mjav86@gold30[00m:[01;34m~/CS214/labs/12/java[00m$ javac -deprecation ThreadedArraySum.java
]0;jav86@gold30: ~/CS214/labs/12/java[01;32mjav86@gold30[00m:[01;34m~/CS214/labs/12/java[00m$ java Thread           javac -deprecation ThreadedArraySum.java[15Pcat ThreadedArraySum.javajava ThreadedArraySum /home/cs/214/labs/12/numbers/1000000numbers.txt 44 1

The sum of the 1000000 numbers is: 50473230
 and summing them took 3788909 time units.

]0;jav86@gold30: ~/CS214/labs/12/java[01;32mjav86@gold30[00m:[01;34m~/CS214/labs/12/java[00m$ [Kjava ThreadedArraySum /home/cs/214/labs/12/numbers/1000000numbers.txt 1 4

The sum of the 1000000 numbers is: 50473230
 and summing them took 10248349 time units.

]0;jav86@gold30: ~/CS214/labs/12/java[01;32mjav86@gold30[00m:[01;34m~/CS214/labs/12/java[00m$ [Kexit

Script done on 2022-04-06 13:44:25-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-04-08 12:37:37-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;jav86@gold11: ~/CS214/labs/12/ruby[01;32mjav86@gold11[00m:[01;34m~/CS214/labs/12/ruby[00m$ cat threaded_array+sum    _syum   um.rb
# array_sum.rb sums the values in an array
#
# Begun by: Prof. Adams, for CS 214 at Calvin College.
# Completed by: Justin Voss
# Date: 04/07/22
#
# Usage: ruby array_sum.rb <inFileName>
######################################################

# make certain the input file was specified on the command-line
def checkCommandLine
   if ARGV.length != 2
      puts "\nUsage: sum <inFileName> <numThreads>\n\n"
      exit(1)
   end
end




# return: an array containing the values from the file
#  whose name was specified on the command-line
def readFile
   strArray = IO.readlines( ARGV[0] )
   intArray = Array.new( Integer(strArray[0]) )
   for i in 2..strArray.size
      if  !strArray[i].nil?
         intArray[i-2] = Integer( strArray[i].chomp )
      end
   end
   intArray 
end

def sumSlice(values, id, sliceSize)
   start = id * sliceSize
   stop = start + sliceSize - 1
   myTotal = 0
   for i in start..stop
      myTotal += values[i]
   end
   myTotal
end

def sumInParallel(values, numThreads)
   sliceSize = values.size / numThreads
   threadArray = Array.new( numThreads )
   result = 0
   lock = Mutex.new

   (1..numThreads-1).each do | i |
       threadArray[i] = Thread.new { 
                         myTotal = sumSlice(values, 
                                              i,
                                              sliceSize) 
                         lock.synchronize {
                             result += myTotal
                         }
       }
   end

   myTotal  = sumSlice(values, 0, sliceSize)

   leftovers = values.size % numThreads
   if leftovers > 0
      for i in values.size-leftovers..values.size-1
         myTotal += values[i]
      end
   end

   lock.synchronize {
      result += myTotal
   }

   for i in 1..numThreads-1
      threadArray[i].join
   end

   result
end


def main
   checkCommandLine
   values = readFile
   startTime = Time.now
   total = sumInParallel(values, Integer( ARGV[1] ) )
   endTime = Time.now
   interval = (endTime - startTime).to_f
   puts "\nThe sum is #{total}\n"
   printf(" and computing it took %.9f seconds.\n\n", interval)
end

main

]0;jav86@gold11: ~/CS214/labs/12/ruby[01;32mjav86@gold11[00m:[01;34m~/CS214/labs/12/ruby[00m$ ruby    cat threaded_array_sum.rbruby threaded_array_sum.rb  /home/cs/214/labs//12/numbers/5numbers.txt 5 1[1P[1@1[1@0[1@0[1@0[1@0[1@0[1@0numbers.txt 1

The sum is 50473230
 and computing it took 0.024545736 seconds.

]0;jav86@gold11: ~/CS214/labs/12/ruby[01;32mjav86@gold11[00m:[01;34m~/CS214/labs/12/ruby[00m$ [Kruby threaded_array_sum.rb  /home/cs/214/labs//12/numbers/1000000numbers.txt 11 4

The sum is 50473230
 and computing it took 0.025299943 seconds.

]0;jav86@gold11: ~/CS214/labs/12/ruby[01;32mjav86@gold11[00m:[01;34m~/CS214/labs/12/ruby[00m$ [Kexit

Script done on 2022-04-08 12:38:58-04:00 [COMMAND_EXIT_CODE="0"]
