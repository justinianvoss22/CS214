Script started on 2022-02-23 11:34:14-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;jav86@remotel1: ~/CS214/labs/07[01;32mjav86@remotel1[00m:[01;34m~/CS214/labs/07[00m$ cat Average.java
/* Average.java is a driver for method avg().
 *
 * Started by: Prof. Adams, for CS 214 at Calvin College
 *
 * Student Name: Justin Voss
 * Date: 2/24/22
 *
 * Precondition: theArray, is an array of double values.
 * Output: the average of the numbers in theArray.
 ***************************************************************/

import java.io.*;

public class Average
{
  public static void main(String[] args) {

    double[] array0 = null;
    double[] array1 = {9.0, 8.0, 7.0, 6.0};


      // output the average of the values in the arrays
     System.out.println("The first average is " + avg(array0));
     System.out.println("The second average is " + avg(array1));
  }
  

  /* sum() is a method that computes the sum of all the values
   * in an array of doubles.
   * Receive: anArray, an array of doubles.
   * Return: the sum of the values in anArray.
   ************************************************************/

  public static double sum(double[] theArray){ 
    double total = 0.0;
    for (int i = 0; i < theArray.length; i++){
        total += theArray[i];
    }
    return total;
}
  

  /* avg() is a method that computes the average of the values
   * in an array.
   * Receive: anArray, an array of doubles.
   * Return: the average of the values in anArray.
   **************************************************************/
  
  public static double avg(double anArray[])
  {
      if (anArray == null || anArray.length <= 0)
          return 0.0;
      else
          return sum(anArray) / anArray.length;
  }

}

]0;jav86@remotel1: ~/CS214/labs/07[01;32mjav86@remotel1[00m:[01;34m~/CS214/labs/07[00m$ cat Average.java[1Preadelf mysterycat Average.java[Kjavac -deprecation Average.java
]0;jav86@remotel1: ~/CS214/labs/07[01;32mjav86@remotel1[00m:[01;34m~/CS214/labs/07[00m$ ja  javac -deprecation Average.java[15Pcat Average.java[1Preadelf mysterycat Average.java                java Average
The first average is 0.0
The second average is 7.5
]0;jav86@remotel1: ~/CS214/labs/07[01;32mjav86@remotel1[00m:[01;34m~/CS214/labs/07[00m$ sc  exit

Script done on 2022-02-23 11:35:06-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-23 12:09:13-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;jav86@remotel1: ~/CS214/labs/07[01;32mjav86@remotel1[00m:[01;34m~/CS214/labs/07[00m$ cat avar  erage.adb
-- average.adb "test-drives" function Average.
-- Precondition: theArray is an array of numbers.
-- Output: the average of the numbers.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Justin Voss
-- Date: 2/24/22
-----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;             -- Put(String)
with Ada.Float_Text_IO; use Ada.Float_Text_IO; -- Put(Float)

procedure average is

-- Declare Vector type
   type Vector is array ( Positive range <>) of Float;
   
-- Define array0 as an array containing no values
   array0 : Vector := (0.0, 0.0);

-- Define array1 as an array containing 9, 8, 7, 6
   array1 : Vector := (9.0, 8.0, 7.0, 6.0);
----------------------------------------------
-- sum() sums the values in an array           -
-- Receive: anArray, an array of numbers     -
-- Return: the sum of the values in anArray. -
----------------------------------------------

function sum(A: Vector) return Float is 
    Total : Float := 0.0; 
  begin 
  --    for I in A'Range 
   for i in A'First.. A'Last  -- using ConstrainedRange to get the values in the array
    loop 
      Total := Total + A(I);   
    end loop; 
    return Total; 
  end sum; 
   

-- average() returns the average of values in an array           -
-- Receive: anArray, an array of numbers     -
-- Return: the average of the values in anArray. -
----------------------------------------------
function average( theArray : Vector ) return Float is 
   begin
      if theArray'Length = 0 then    -- checks if the array is empty
         return 0.0;  -- returns 0 if the array is empty
      end if;
      return sum(theArray) / Float(theArray'Length);  -- returns the average


   end average;

begin
   Put(" average 0 is ");
   Put( average(array0) );
   New_line;
   Put(" average 1 is ");
   Put( average(array1) );
   New_line;
end average;

]0;jav86@remotel1: ~/CS214/labs/07[01;32mjav86@remotel1[00m:[01;34m~/CS214/labs/07[00m$ gnatme ake average.adb
x86_64-linux-gnu-gcc-7 -c average.adb
x86_64-linux-gnu-gnatbind-7 -x average.ali
x86_64-linux-gnu-gnatlink-7 average.ali
]0;jav86@remotel1: ~/CS214/labs/07[01;32mjav86@remotel1[00m:[01;34m~/CS214/labs/07[00m$ ./averg age
 average 0 is  0.00000E+00
 average 1 is  7.50000E+00
]0;jav86@remotel1: ~/CS214/labs/07[01;32mjav86@remotel1[00m:[01;34m~/CS214/labs/07[00m$ exit

Script done on 2022-02-23 12:09:36-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-23 14:18:21-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;jav86@gold27: ~/CS214/labs/07/clojure[01;32mjav86@gold27[00m:[01;34m~/CS214/labs/07/clojure[00m$ cat average.clj
cat: average.clj: No such file or directory
]0;jav86@gold27: ~/CS214/labs/07/clojure[01;32mjav86@gold27[00m:[01;34m~/CS214/labs/07/clojure[00m$ cd src
]0;jav86@gold27: ~/CS214/labs/07/clojure/src[01;32mjav86@gold27[00m:[01;34m~/CS214/labs/07/clojure/src[00m$ cat   cd srcat average.clj
;; average.clj "test-drives" function average().
;;
;; Output: the average of a sequence of numbers.
;;
;; Usage: clojure -m average
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by: Justin Voss
;; Date: 2/24/22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns average)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sum() sums the values in a vector.       
;; Receive: aVec, a vector of numbers.
;; Return: the sum of the values in aVec.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; harder (recursive) solution
(defn sum [aVec]
  (if (vector? aVec)      ; if aVec is a vector
    (if (empty? aVec)     ;   if aVec is empty:
      0.0                 ;     return 0
      (+ (peek aVec)      ;   else return the last value
         (sum (pop aVec)) ;    + sum(all but the last value)
      )
    )
  )
)

;; easier (non-recursive) solution
(defn sum2 [aVec]
  (if (vector? aVec)      ; if aVec is a vector:
    (if (empty? aVec)     ;   if aVec is empty:
      0.0                 ;    return 0
      (reduce + aVec)     ;   else reduce aVec using +
    )
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; average() computes the average of a vector of numbers.
;; Receive: aVec, a vector of numbers. 
;; Return: the average of the numbers in aVec.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   
(defn average [aVec]
  (if (vector? aVec)                  ; checks if it is a vector
    (if (empty? aVec)                 ; checks if it is empty
      0.0                             ; returns 0
      (/ (sum aVec) (count aVec)))))  ; returns the average, by computing the sum and dividing that by the number of items in the vector


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main function to test functions sum() and average()
;; Output: the sum and average of some test vectors.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ emptyVec []
      testVec  [9.0 8.0 7.0 6.0]
    ]

    (print "\nThe empty vec: " emptyVec) 
    (print "\nThe test  vec: " testVec) 
    (println "\n")

    ;; Test sum()...
    (printf "\nThe first sum is %.3f\n" (sum emptyVec))
    (printf "The second sum is %.3f\n" (sum testVec))

    ;; Test average()...
    (printf "\nThe first average is %.3f\n" (average emptyVec))
    (printf "The second average is %.3f\n" (average testVec))
    (println "\n")

    ;; Test sum2()...
    (printf "\nThe first sum2 is %.3f\n" (sum2 emptyVec))
    (printf "The second sum2 is %.3f\n" (sum2 testVec))
    (println "\n")
  )
)

]0;jav86@gold27: ~/CS214/labs/07/clojure/src[01;32mjav86@gold27[00m:[01;34m~/CS214/labs/07/clojure/src[00m$ cd ..
]0;jav86@gold27: ~/CS214/labs/07/clojure[01;32mjav86@gold27[00m:[01;34m~/CS214/labs/07/clojure[00m$ clojure -m average

The empty vec:  []
The test  vec:  [9.0 8.0 7.0 6.0]


The first sum is 0.000
The second sum is 30.000

The first average is 0.000
The second average is 7.500



The first sum2 is 0.000
The second sum2 is 30.000


]0;jav86@gold27: ~/CS214/labs/07/clojure[01;32mjav86@gold27[00m:[01;34m~/CS214/labs/07/clojure[00m$ exit

Script done on 2022-02-23 14:18:47-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-23 12:38:41-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;jav86@remotel1: ~/CS214/labs/07[01;32mjav86@remotel1[00m:[01;34m~/CS214/labs/07[00m$ cat ar verage.rb
# average.rb averages the values of an array of doubles.
# Precondition: theArray is an array of numbers
# Output: the average of the values in theArray
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by:: Justin Voss
# Date:   2/24/22
########################################################

###############################################
# sum() sums the values in an array
# Receive: anArray, an array of numbers
# Return: the sum of the values in anArray.
################################################

def sum(anArray)
   # initialize total as zero
   total = 0.0
   # for each item in the array, add the value to total
   anArray.each { |item| total = total + item}
   return total
end


###############################################
# average() gets the average of the values in an array
# Receive: anArray, an array of numbers
# Return: the average of the values in anArray.
################################################
def average(anArray)
   if anArray.empty? # if the array is empty, return 0.
      return 0.0
   end
   return sum(anArray) / anArray.size  # returns the average

end

def main
   # Define array0 as an Array containing no values
   array0 = Array.new
   # Define array1 as an Array containing 9.0, 8.0, 7.0, 6.0
   array1 = [9.0, 8.0, 7.0, 6.0]
   puts "sum 0 is: #{ sum(array0) }\n"
   puts "sum 1 is: #{ sum(array1) }\n"

   puts "average 0 is: #{ average(array0) }\n"
   puts "average 1 is: #{ average(array1) }\n"
end

main

]0;jav86@remotel1: ~/CS214/labs/07[01;32mjav86@remotel1[00m:[01;34m~/CS214/labs/07[00m$ j ruby average.rb
sum 0 is: 0.0
sum 1 is: 30.0
average 0 is: 0.0
average 1 is: 7.5
]0;jav86@remotel1: ~/CS214/labs/07[01;32mjav86@remotel1[00m:[01;34m~/CS214/labs/07[00m$ exit

Script done on 2022-02-23 12:39:00-05:00 [COMMAND_EXIT_CODE="0"]
