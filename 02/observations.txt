1.This code in these lines is based on the code that is in my lex file. Each part of the C code corresponds to either the start and Start command recieved, or the stop, going to the stop command recieved. Also, if the command is not start or stop, the code just makes it echo whatever input you typed.

2. When typing words starting with a letter, like "word", "R2D2", or "what", it outputs WORD. When typing "1234", it outputs NUMBER. When typing "hello_there", it outputs "WORD", and then on the next line "_WORD". This is because the underscore character is not included in any of the languages that we made, so it just outputs the type of the first thing typed, then an underscore, then the type of the other thing typed. We will need to add underscore to this grammar so it will be able to be a first and subsequent letter.

3. The nonterminal is able to recurse with itself, or keep on doing other production rules. The "commands" production is a nonterminal, as its production has other production rules that the program can choose from. The production "command" is also nonterminal, as it has two other production rules that it can do, "heat_switch" and "temperature_set". These two are terminals, as all it has is a tolken action, and a print statement. There is no where to go from these production rules, so the code will stop once it has gone to either of these. 

4. When you turn it on, it does not say heater on, it says heat turned on or off. It does not say whether it is turned off or on. It also does not know the actual output of the temperature, it just says temperature set.
