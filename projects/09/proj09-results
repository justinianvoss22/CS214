Script started on 2022-03-19 20:02:31-04:00 [TERM="xterm-256color" TTY="/dev/pts/2" COLUMNS="105" LINES="30"]
]0;jav86@gold29: ~/CS214/projects/09/java[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/java[00m$ cat TemperatureTester.java Temperature.java
/* TemperatureTester.java is a 'driver' to test class Temperature.
 * Student: Justin Voss
 * Date: 03/17/22
 ************************************************************/
import java.util.Scanner;

public class TemperatureTester  
{
  public static void main(String[] args)
  {
      Temperature temp1 = new Temperature(32, 'F');
      Temperature temp2 = new Temperature(0, 'C');
      Temperature temp3 = new Temperature(273.15, 'K');

    // testing getter methods
      // getDegrees
      assert temp1.getDegrees() == 32;
      assert temp2.getDegrees()== 0;
      assert temp3.getDegrees()== 273.15;
      // getScale
      assert temp1.getScale() == 'F';
      assert temp2.getScale() == 'C';
      assert temp3.getScale() == 'K';

    // testing converter methods
      // toFahrenheight()
      assert temp1.toFahrenheit() == temp1;
      assert temp2.toFahrenheit() == temp1;
      assert temp3.toFahrenheit() == temp1;
      // toCelsius()
      assert temp1.toCelsius() == temp2;
      assert temp2.toCelsius() == temp2;
      assert temp3.toCelsius() == temp2;
      // toKelvin()
      assert temp1.toKelvin() == temp3;
      assert temp2.toKelvin() == temp3;
      assert temp3.toKelvin() == temp3;

      // testing print temperature
      temp1.printTemperature();
      System.out.println();
      temp2.printTemperature();
      System.out.println();
      temp3.printTemperature();
      System.out.println();

      if (!temp2.equals(temp3)){
        System.out.println("ERROR, temp2 and temp3 should equal");
      }
      

      // System.out.println("\nTesting toCelsius...");
      // Temperature tempA = new Temperature(100, 'F');
      // System.out.println(tempA.getDegrees());

      // tempA.toCelsius().printTemperature();
      // System.out.println(tempA.toCelsius().getDegrees());

      System.out.println("All tests passed!");


      Scanner scanner = new Scanner(System.in);

      System.out.println("\nEnter a base temperature and scale: ");
      
      Temperature baseTemp = Temperature.readTemperature();
      // From the read function, if it is null, then it is an invalid function
      if (baseTemp == null){
        System.out.println("Invalid input. Try again. ");
      }
      System.out.println("\nEnter a stop temperature and scale: ");
      Temperature limitTemp = Temperature.readTemperature();
      if (limitTemp == null){
        System.out.println("Invalid input. Try again. ");
      }
      System.out.println("\nEnter a step value: ");
      double stepValue = scanner.nextDouble();
      scanner.close();

      // keep track off temperature with current
      Temperature current = baseTemp;

      // loops until table is finished
      while (true){
        // if the current and base temp are less than the limit OR it equals limit temp (would only print one value).
        if (current.lessThan(limitTemp) == baseTemp.lessThan(limitTemp) || current.equals(limitTemp)){
        
          // If the base is bigger than the limit, it gives an error and does not produce output.
          if (!baseTemp.lessThan(limitTemp)){
            System.out.println("Error: base temp has to be greater than limit temp.");
            break;
        }
          else {

        // prints out the temperatures
        current.toFahrenheit().printTemperature();
        System.out.print("\t");
        current.toCelsius().printTemperature();
        System.out.print("\t");
        current.toKelvin().printTemperature();
        System.out.println();

        current = current.raise(stepValue);
        }
      }
      else { break;}
    }


    }  
}/* Temperature.java implements class Temperature.
 * Student: Justin Voss
 * Date: 03/17/22
 ************************************************************/

 import java.util.Scanner;
 import java.lang.Character;


 // the Temperature class appears outside of the rest of the program
class Temperature {

    private static Scanner scanner = new Scanner(System.in);
    // private constants
    private static final char Fahrenheit = 'F';
    private static final char Celsius = 'C';
    private static final char Kelvin = 'K';
    // private instance variables
    private double myDegrees;
    private char myScale; 

    // initialization function
    public Temperature(double degrees, char scale) {
        myDegrees = degrees;
        myScale = Character.toUpperCase(scale);
        // uses the validity checker function to check if the inputs are valid
        if (!checkValid(myDegrees,myScale)){
            throw new IllegalArgumentException("Invalid input.");
        } 
    }

/*
*   getDegrees returns degrees, a double vale
*   Returns: myDegrees
*/
    public double getDegrees() {
        return myDegrees;
    }

/*
*   getScale returns the scale, either F, C, or K
*   Returns: myScale
*/
    public double getScale() {
        return myScale;
    }

/*
*   toFahrenheit returns the Temperature object, in Fahrenheit
*   Returns: a Temperature object, in Fahrenheit
*/
    public Temperature toFahrenheit() {
        if (myScale == Celsius){
            // F to C formula
            return new Temperature((myDegrees * (9/5.0)) + 32, Fahrenheit);
        }
        else if (myScale == Kelvin){
            // F to K formula
            return new Temperature((myDegrees - 273.15) * (9.0 /5.0) + 32, Fahrenheit);
        }
        else{
            return this;
        }
    }

/*
*   toCelsius returns the Temperature object, in Celsius
*   Returns: a Temperature object, in Celsius
*/
    public Temperature toCelsius() {
        if (myScale == Fahrenheit){
            // C to F formula
            return new Temperature((myDegrees - 32) * (5/9.0), Celsius);
        }   
        else if (myScale == Kelvin){
            // C to K formula
            return new Temperature(myDegrees - 273.15, Celsius);
        }
        else{
            return this;
        }
    }


 /*
*   toKelvin returns the Temperature object, in Kelvin
*   Returns: a Temperature object, in Kelvin
*/
    public Temperature toKelvin() {
        if (myScale == Fahrenheit){
            // F to K formula
            return new Temperature((myDegrees - 32.0) * (5/9.0) + 273.15, Kelvin);
        }
        else if (myScale == Celsius){
            // C to K formula
            return new Temperature(myDegrees + 273.15, Kelvin);
        }
        else{
            return this;
        }
    }

 /*
*   readTemperature returns the Temperature object from user input
*   Returns: a Temperature object, if it is valid
*/
    public static Temperature readTemperature() {
        
        String input = scanner.nextLine(); // reads user input
        String[] twoInputs = input.split(" "); // splits two parts into an array
        double degrees1 = Double.parseDouble(twoInputs[0]);  // puts degree1 as the index 0 of array
        char scale1 = twoInputs[1].charAt(0); // puts scale1 as the char at index 1
        
        try {      // checks if the double is valid
            degrees1 = Double.parseDouble(twoInputs[0]);
        } catch (NumberFormatException N) {
            return null;
        }
        
        if(!checkValid(degrees1,scale1)){ // checks if scale is valid
            return null;
        }
        // returns temperature object
        return new Temperature(degrees1, scale1);
    }

/*
*   printTemperature prints the Temperature object
*   Returns: prints the Temperature object
*/
    public void printTemperature() {
       // System.out.printf(String.format("%.2f ",myDegrees) + myScale);
        System.out.printf("%.2f\t%c", myDegrees, myScale);
        
    }

/*
*   raise returns a Temperature with a degree amount higher than the Temperature received
*   Returns: Temperature with a degree amount higher than the Temperature received
*/
public Temperature raise(double moreDegrees) {
    return new Temperature(myDegrees + moreDegrees, myScale);
}
/*
*   lower returns a Temperature with a degree amount lower than the Temperature received
*   Returns: Temperature with a degree amount lower than the Temperature received
*/
public Temperature lower(double moreDegrees) {
    return new Temperature(myDegrees - moreDegrees, myScale);
}



/*
*   Checks if two Temps are equal
    Parameters: another Temperature object temp
*   Returns: true if they are equal, false if the are not
*/
public boolean equals(Temperature temp) {
    // if myDegrees (on the left of the function) is equal to the temp (in the parameters), it returns true
    return compareTemps(temp).getDegrees() == myDegrees;
}


/*
*   Checks if one Temp is less than the other
    Parameters: another Temperature object temp
*   Returns: true if the left is less than, false if the are not
*/
public boolean lessThan(Temperature temp) {
    // if the degrees on the left are less than on the right, it returns true
    if(myDegrees < compareTemps(temp).getDegrees() ){
        return true;
    }
    return false;
}
/*
*   compareTemps looks at two Temp objects and returns one the other's scale
*   Parameters: a Temperature object temp
*   Returns: Temp object changed to the other Temp's scale
*/
public Temperature compareTemps(Temperature temp) {
    // if they are the same type, just return the temp
    if (temp.myScale != myScale) {
        // otherwise, convert them to the same type
	    if (myScale == Celsius){
		    return temp.toCelsius();
        }
	    else if (myScale == Kelvin){
		    return temp.toKelvin();
        }
	    else{
		    return temp.toFahrenheit();
        }
	}
    return temp;
}
    


/*
*   checkValid checks if the input is valid
*   Parameters: a double, degrees, and a character, scale
*   Returns: true or false, based on if it is valid or not
*/
    private static boolean checkValid(double degrees, char scale){
        char scaleCheck = Character.toUpperCase(scale);
        if ((scaleCheck == Fahrenheit && degrees >= -459.67) || (scaleCheck == Celsius && degrees >= -273.15) || (scaleCheck == Kelvin && degrees >= 0.0 )) {
            return true;
        }
        return false;
    }
}]0;jav86@gold29: ~/CS214/projects/09/java[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/java[00m$ javac -deprea cation TemperatureTese ter.java
]0;jav86@gold29: ~/CS214/projects/09/java[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/java[00m$ java TemperatureTester
32.00	F
0.00	C
273.15	K
All tests passed!

Enter a base temperature and scale: 
0 F

Enter a stop temperature and scale: 
100 C

Enter a step value: 
2.5
0.00	F	-17.78	C	255.37	K
2.50	F	-16.39	C	256.76	K
5.00	F	-15.00	C	258.15	K
7.50	F	-13.61	C	259.54	K
10.00	F	-12.22	C	260.93	K
12.50	F	-10.83	C	262.32	K
15.00	F	-9.44	C	263.71	K
17.50	F	-8.06	C	265.09	K
20.00	F	-6.67	C	266.48	K
22.50	F	-5.28	C	267.87	K
25.00	F	-3.89	C	269.26	K
27.50	F	-2.50	C	270.65	K
30.00	F	-1.11	C	272.04	K
32.50	F	0.28	C	273.43	K
35.00	F	1.67	C	274.82	K
37.50	F	3.06	C	276.21	K
40.00	F	4.44	C	277.59	K
42.50	F	5.83	C	278.98	K
45.00	F	7.22	C	280.37	K
47.50	F	8.61	C	281.76	K
50.00	F	10.00	C	283.15	K
52.50	F	11.39	C	284.54	K
55.00	F	12.78	C	285.93	K
57.50	F	14.17	C	287.32	K
60.00	F	15.56	C	288.71	K
62.50	F	16.94	C	290.09	K
65.00	F	18.33	C	291.48	K
67.50	F	19.72	C	292.87	K
70.00	F	21.11	C	294.26	K
72.50	F	22.50	C	295.65	K
75.00	F	23.89	C	297.04	K
77.50	F	25.28	C	298.43	K
80.00	F	26.67	C	299.82	K
82.50	F	28.06	C	301.21	K
85.00	F	29.44	C	302.59	K
87.50	F	30.83	C	303.98	K
90.00	F	32.22	C	305.37	K
92.50	F	33.61	C	306.76	K
95.00	F	35.00	C	308.15	K
97.50	F	36.39	C	309.54	K
100.00	F	37.78	C	310.93	K
102.50	F	39.17	C	312.32	K
105.00	F	40.56	C	313.71	K
107.50	F	41.94	C	315.09	K
110.00	F	43.33	C	316.48	K
112.50	F	44.72	C	317.87	K
115.00	F	46.11	C	319.26	K
117.50	F	47.50	C	320.65	K
120.00	F	48.89	C	322.04	K
122.50	F	50.28	C	323.43	K
125.00	F	51.67	C	324.82	K
127.50	F	53.06	C	326.21	K
130.00	F	54.44	C	327.59	K
132.50	F	55.83	C	328.98	K
135.00	F	57.22	C	330.37	K
137.50	F	58.61	C	331.76	K
140.00	F	60.00	C	333.15	K
142.50	F	61.39	C	334.54	K
145.00	F	62.78	C	335.93	K
147.50	F	64.17	C	337.32	K
150.00	F	65.56	C	338.71	K
152.50	F	66.94	C	340.09	K
155.00	F	68.33	C	341.48	K
157.50	F	69.72	C	342.87	K
160.00	F	71.11	C	344.26	K
162.50	F	72.50	C	345.65	K
165.00	F	73.89	C	347.04	K
167.50	F	75.28	C	348.43	K
170.00	F	76.67	C	349.82	K
172.50	F	78.06	C	351.21	K
175.00	F	79.44	C	352.59	K
177.50	F	80.83	C	353.98	K
180.00	F	82.22	C	355.37	K
182.50	F	83.61	C	356.76	K
185.00	F	85.00	C	358.15	K
187.50	F	86.39	C	359.54	K
190.00	F	87.78	C	360.93	K
192.50	F	89.17	C	362.32	K
195.00	F	90.56	C	363.71	K
197.50	F	91.94	C	365.09	K
200.00	F	93.33	C	366.48	K
202.50	F	94.72	C	367.87	K
205.00	F	96.11	C	369.26	K
207.50	F	97.50	C	370.65	K
210.00	F	98.89	C	372.04	K
]0;jav86@gold29: ~/CS214/projects/09/java[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/java[00m$ java TemperatureTester
32.00	F
0.00	C
273.15	K
All tests passed!

Enter a base temperature and scale: 
0 K

Enter a stop temperature and scale: 
212 F

Enter a step value: 
20.0
-459.67	F	-273.15	C	0.00	K
-423.67	F	-253.15	C	20.00	K
-387.67	F	-233.15	C	40.00	K
-351.67	F	-213.15	C	60.00	K
-315.67	F	-193.15	C	80.00	K
-279.67	F	-173.15	C	100.00	K
-243.67	F	-153.15	C	120.00	K
-207.67	F	-133.15	C	140.00	K
-171.67	F	-113.15	C	160.00	K
-135.67	F	-93.15	C	180.00	K
-99.67	F	-73.15	C	200.00	K
-63.67	F	-53.15	C	220.00	K
-27.67	F	-33.15	C	240.00	K
8.33	F	-13.15	C	260.00	K
44.33	F	6.85	C	280.00	K
80.33	F	26.85	C	300.00	K
116.33	F	46.85	C	320.00	K
152.33	F	66.85	C	340.00	K
188.33	F	86.85	C	360.00	K
]0;jav86@gold29: ~/CS214/projects/09/java[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/java[00m$ exit

Script done on 2022-03-19 20:03:18-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-19 20:00:33-04:00 [TERM="xterm-256color" TTY="/dev/pts/3" COLUMNS="105" LINES="30"]
]0;jav86@gold29: ~/CS214/projects/09/ada[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/ada[00m$ cat temperature_tester.adb temperature  _package.ads temperature_pack age.adb
-- temperature_tester.adb "test-drives" the Temperature type.
--
-- Completed by: Justin Voss
-- Date: 3/17/22
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;
with Temperature_Package; use Temperature_Package;
with Ada.Float_Text_IO; use Ada.Float_Text_IO;

procedure temperature_tester is


  aTemp : Temperature_Package.Temperature;
  aTemp2 : Temperature_Package.Temperature;
  aTemp3 : Temperature_Package.Temperature;
  aTemp4 : Temperature_Package.Temperature;
  aTemp5 : Temperature_Package.Temperature;
  
  baseTemp : Temperature_Package.Temperature;
  limitTemp :  Temperature_Package.Temperature;
  stepValue : Float;
  currentTemp : Temperature_Package.Temperature;
  temporaryTemp : Temperature_Package.Temperature;
  

begin
  Init(aTemp, 32.0, 'f');
  Init(aTemp2, 0.0, 'c');
  Init(aTemp3, 273.15, 'K');
  Init(aTemp4, 32.0, 'f');
  Init(aTemp5, 100.0, 'F');
  -- testing get method
  pragma Assert(getDegrees(atemp) = 32.0);
  -- testing converter methods
  pragma Assert(toFahrenheit(aTemp4) = aTemp);
  pragma Assert(toCelsius(aTemp2) = aTemp);
  pragma Assert(toKelvin(aTemp3) = aTemp);
  -- test equals
  pragma Assert(equals(aTemp, aTemp4) = True);
  pragma Assert(equals(aTemp, aTemp2) = False);
  -- test less than
  pragma Assert(lessThan(aTemp, aTemp4) = False);
  pragma Assert(lessThan(aTemp, aTemp5) = True);

  printTemperature(toCelsius(aTemp5));
  Put("All tests passed!"); New_line;

  
  Put_Line("");

  Put_Line("To enter a start temperature... ");
  readTemperature(baseTemp);
  Put_Line("To enter a stop temperature... ");
  readTemperature(limitTemp);
  Put_Line("Enter a step value: ");
  Get(stepValue);
  currentTemp := baseTemp;

if Temperature_Package.lessThan(baseTemp, limitTemp) = False then
      Put("Error: base temp has to be greater than limit temp.");
      return;
      else 
          while lessThan(currentTemp, limitTemp) loop
  
        temporaryTemp := toFahrenheit(currentTemp);
        printTemperature(temporaryTemp);
        temporaryTemp := toCelsius(currentTemp);
        printTemperature(temporaryTemp);
        temporaryTemp := toKelvin(currentTemp);
        printTemperature(temporaryTemp);
        New_Line;
        currentTemp := raiseTemperature(currentTemp, stepValue);
  end loop;
end if;


end temperature_tester;-- temperature.ads declares the temperature type and its operations.
-- Completed by: Justin Voss
-- Date: 3/17/22
--------------------------------------------------------------

package temperature_package is

type temperature is private;

procedure Init(Temp: out Temperature; degrees: in Float; scale : in Character);

    function getDegrees( Temp: in Temperature) return Float;

    function getScale( Temp: in Temperature) return Character;

    function toFahrenheit( Temp: in out Temperature) return Temperature;

    function checkValid( degrees : Float; scale : Character) return Boolean;

    function toCelsius( Temp: in out Temperature) return Temperature;

    function toKelvin( Temp: in out Temperature) return Temperature;

    procedure readTemperature( Temp: in out Temperature);

    procedure printTemperature( Temp: in Temperature);

    function raiseTemperature( Temp: in Temperature; moreDegrees : Float) return Temperature;

    function lowerTemperature( Temp: in Temperature; moreDegrees : Float) return Temperature;

     function equals( Temp: in out Temperature; Temp2 : in out Temperature) return boolean;

    function lessThan( Temp: in Temperature; Temp2 : in Temperature) return boolean;
    


private 

    type Temperature is
        record
          myDegrees: Float;
          myScale : Character;
        end record;

    
end Temperature_Package;-- temperature_package.adb defines operations for the Temperature type.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Justin Voss
-- Date: 3/17/22
---------------------------------------------------------
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Float_Text_IO; use Ada.Float_Text_IO;
with Ada.Characters.Handling; use Ada.Characters.Handling;

package body Temperature_Package is

  ----------------------------------------------
  -- Init initializes a aTemp variable          
  -- Receive: Temp, the Temp variable;          
  --          degrees, a float   
  --          scale, a char, (one of 'F', 'C', 'K' 'f', 'c', or 'k')     
  -- Return: Temp, its fields set to myDegrees and myScale
  --                    
  ----------------------------------------------

  procedure Init(Temp: out Temperature; degrees: in Float; scale : in Character) is
  begin
    Temp.myDegrees := degrees;
    Temp.myScale := To_Upper(scale); 
    if (checkValid(Temp.myDegrees, Temp.myScale) = False) then  -- checks if valid
        Put("Error: Invalid argument.");
        return;
    end if;
  end Init;

------------------------------------------------
--  getDegrees returns myDegrees, a float 
-- Receive: Temp, the Temp variable;          
--   Returns: myDegrees 
------------------------------------------------
    function getDegrees( Temp: in Temperature) return Float is
    begin
        return Temp.myDegrees;
    end getDegrees;

------------------------------------------------
--  getScale returns the scale, either F, C, or K
-- Receive: Temp, the Temp variable;          
--  Returns: myScale
------------------------------------------------
    function getScale( Temp: in Temperature) return Character is
    begin
        return Temp.myScale;
    end getScale;

----------------------------------------------
-- toFahrenheit returns the Temperature object, in Fahrenheit
-- Receive: Temp, the Temp variable;                              
-- Returns: a Temperature object, in Fahrenheit
----------------------------------------------
    function toFahrenheit( Temp: in out Temperature) return Temperature is
    Temp2 : Temperature;
    begin
        if Temp.myScale = 'C' then
            Init(Temp2, (Temp.myDegrees * (9.0 / 5.0) + 32.0), 'F');
        elsif Temp.myScale = 'K' then
            Init(Temp2, (Temp.myDegrees - 273.15) * (9.0 / 5.0) + 32.0, 'F');
        else 
            return Temp;
        end if;
        return Temp2;
    end toFahrenheit;

----------------------------------------------
-- toCelsius returns the Temperature object, in Celsius
-- Receive: Temp, the Temp variable;                              
-- Returns: a Temperature object, in Celsius
----------------------------------------------
    function toCelsius( Temp: in out Temperature) return Temperature is
    Temp2 : Temperature;
    begin
        if Temp.myScale = 'F' then
            Init(Temp2, (Temp.myDegrees - 32.0) * (5.0/9.0), 'C');
        elsif Temp.myScale = 'K' then
            Init(Temp2, (Temp.myDegrees - 273.15), 'C');
        else 
            return Temp;
        end if;
        return Temp2;
    end toCelsius;

----------------------------------------------
-- toKelvin returns the Temperature object, in Kelvin
-- Receive: Temp, the Temp variable;                              
-- Returns: a Temperature object, in Kelvin
----------------------------------------------
    function toKelvin( Temp: in out Temperature) return Temperature is
    Temp2 : Temperature;
    begin
        if Temp.myScale = 'F' then
            Init(Temp2, (Temp.myDegrees - 32.0) * (5.0/9.0) + 273.15, 'K');
        elsif Temp.myScale = 'C' then
            Init(Temp2, (Temp.myDegrees + 273.15), 'K');
        else 
            return Temp;
        end if;
        return Temp2;
    end toKelvin;

----------------------------------------------
-- readTemperature returns the Temperature object from user input
-- Receive: Temp, the Temp variable;                              
-- Returns: a Temperature object from user input, if it is valid
----------------------------------------------
    procedure readTemperature( Temp: in out Temperature) is
        degree : Float;
        scale : Character;

    begin
        Put(" Enter a degree: ");
        Get(degree);
        Put(" Enter a scale: ");
        Get(scale);
    if (checkValid(degree,scale) = True ) then
        Init(Temp, degree, scale);
    else
        Put("Invalid argument."); 
        return;
       
    end if;
    end readTemperature;

----------------------------------------------
-- printTemperature prints the Temperature object
-- Receive: Temp, the Temp variable;                              
-- Returns: prints a Temperature object from user input, if it is valid
----------------------------------------------
    procedure printTemperature( Temp: in Temperature) is
    begin
        Put(getDegrees(Temp), 0, 2, 0);
        Put("      ");
        Put(getScale(Temp));
        Put("      ");

    end printTemperature;

----------------------------------------------
-- raiseTemperature raises the degree of the Temp object
-- Receive: Temp, the Temp variablel, and the degrees to raise it by;                              
-- Returns: raises the temp by a certain amount of degrees
----------------------------------------------
    function raiseTemperature( Temp: in Temperature; moreDegrees : Float) return Temperature is
        temp2 : Temperature;
    begin
        Init(temp2, Temp.myDegrees + moreDegrees, Temp.myScale);
        return temp2;
    end raiseTemperature;

---------------------------------------------
-- lowerTemperature lowers the degree of the Temp object
-- Receive: Temp, the Temp variablel, and the degrees to raise it by;                              
-- Returns: lowers the temp by a certain amount of degrees
----------------------------------------------
    function lowerTemperature( Temp: in Temperature; moreDegrees : Float) return Temperature is
        temp2 : Temperature;
    begin
        Init(temp2, Temp.myDegrees - moreDegrees, Temp.myScale);
        return temp2;
    end lowerTemperature;


---------------------------------------------
-- equals compares two temps and checks if they are equal
-- Receive: an in Temperature Temp, another in Temperature Temp2                             
-- Returns: true if they are equal, false if the are not
----------------------------------------------
    function equals( Temp: in out Temperature; Temp2 : in out Temperature) return boolean is
    Temp3 : Temperature;  -- two temp objects to be used for comparison
    Temp4 : Temperature;
    begin
        Temp3 :=  Temp;
        Temp4 := Temp2;
        if Temp3.myScale = Temp4.myScale then
            return Temp3.myDegrees = Temp4.myDegrees;
        else 
            Temp3 := toCelsius(Temp3);  -- turns them all to the same temperature scale
            Temp4 := toCelsius(Temp4);
            return Temp3.myDegrees = Temp4.myDegrees;
        end if;
    end equals;

---------------------------------------------
-- lessThan compares two temps and checks if the left is less than right
-- Receive: an in Temperature Temp, another in Temperature Temp2                             
-- Returns: true if the left is less than, false if it is not
----------------------------------------------
    function lessThan( Temp: in Temperature; Temp2 : in Temperature) return boolean is
    Temp3 : Temperature;
    Temp4 : Temperature;
    begin
        Temp3 :=  Temp;
        Temp4 := Temp2;
        if Temp3.myScale = Temp4.myScale then
            return Temp3.myDegrees < Temp4.myDegrees;
        else 
            Temp3 := toCelsius(Temp3);  -- turns them all to the same temperature scale
            Temp4 := toCelsius(Temp4);
            return Temp3.myDegrees < Temp4.myDegrees;
        end if;
    end lessThan;


----------------------------------------------
-- checkValid checks if the input is valid
-- Parameters: a double, degrees, and a character, scale     
-- Returns: true or false, based on if it is valid or not
----------------------------------------------
    function checkValid( degrees : Float; scale : Character) return Boolean is
    scaleCheck : Character := To_Upper(scale);
    begin
        if scaleCheck = 'F' and degrees >= -459.67 then
            return True;
        elsif scaleCheck = 'C' and degrees >= -273.15 then
            return True;
        elsif scaleCheck = 'K' and degrees >= 0.0 then
            return True;
        else
            return False;
        end if;
    
    end checkValid;

end Temperature_Package;]0;jav86@gold29: ~/CS214/projects/09/ada[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/ada[00m$ [Kgnatmake temperature_tester.adb
gnatmake: "temperature_tester" up to date.
]0;jav86@gold29: ~/CS214/projects/09/ada[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/ada[00m$ t ./temperature_tester
37.78      C      All tests passed!

To enter a start temperature... 
 Enter a degree: 0
 Enter a scale: F
To enter a stop temperature... 
 Enter a degree: 100
 Enter a scale: C
Enter a step value: 
2.5
0.00      F      -17.78      C      255.37      K      
2.50      F      -16.39      C      256.76      K      
5.00      F      -15.00      C      258.15      K      
7.50      F      -13.61      C      259.54      K      
10.00      F      -12.22      C      260.93      K      
12.50      F      -10.83      C      262.32      K      
15.00      F      -9.44      C      263.71      K      
17.50      F      -8.06      C      265.09      K      
20.00      F      -6.67      C      266.48      K      
22.50      F      -5.28      C      267.87      K      
25.00      F      -3.89      C      269.26      K      
27.50      F      -2.50      C      270.65      K      
30.00      F      -1.11      C      272.04      K      
32.50      F      0.28      C      273.43      K      
35.00      F      1.67      C      274.82      K      
37.50      F      3.06      C      276.21      K      
40.00      F      4.44      C      277.59      K      
42.50      F      5.83      C      278.98      K      
45.00      F      7.22      C      280.37      K      
47.50      F      8.61      C      281.76      K      
50.00      F      10.00      C      283.15      K      
52.50      F      11.39      C      284.54      K      
55.00      F      12.78      C      285.93      K      
57.50      F      14.17      C      287.32      K      
60.00      F      15.56      C      288.71      K      
62.50      F      16.94      C      290.09      K      
65.00      F      18.33      C      291.48      K      
67.50      F      19.72      C      292.87      K      
70.00      F      21.11      C      294.26      K      
72.50      F      22.50      C      295.65      K      
75.00      F      23.89      C      297.04      K      
77.50      F      25.28      C      298.43      K      
80.00      F      26.67      C      299.82      K      
82.50      F      28.06      C      301.21      K      
85.00      F      29.44      C      302.59      K      
87.50      F      30.83      C      303.98      K      
90.00      F      32.22      C      305.37      K      
92.50      F      33.61      C      306.76      K      
95.00      F      35.00      C      308.15      K      
97.50      F      36.39      C      309.54      K      
100.00      F      37.78      C      310.93      K      
102.50      F      39.17      C      312.32      K      
105.00      F      40.56      C      313.71      K      
107.50      F      41.94      C      315.09      K      
110.00      F      43.33      C      316.48      K      
112.50      F      44.72      C      317.87      K      
115.00      F      46.11      C      319.26      K      
117.50      F      47.50      C      320.65      K      
120.00      F      48.89      C      322.04      K      
122.50      F      50.28      C      323.43      K      
125.00      F      51.67      C      324.82      K      
127.50      F      53.06      C      326.21      K      
130.00      F      54.44      C      327.59      K      
132.50      F      55.83      C      328.98      K      
135.00      F      57.22      C      330.37      K      
137.50      F      58.61      C      331.76      K      
140.00      F      60.00      C      333.15      K      
142.50      F      61.39      C      334.54      K      
145.00      F      62.78      C      335.93      K      
147.50      F      64.17      C      337.32      K      
150.00      F      65.56      C      338.71      K      
152.50      F      66.94      C      340.09      K      
155.00      F      68.33      C      341.48      K      
157.50      F      69.72      C      342.87      K      
160.00      F      71.11      C      344.26      K      
162.50      F      72.50      C      345.65      K      
165.00      F      73.89      C      347.04      K      
167.50      F      75.28      C      348.43      K      
170.00      F      76.67      C      349.82      K      
172.50      F      78.06      C      351.21      K      
175.00      F      79.44      C      352.59      K      
177.50      F      80.83      C      353.98      K      
180.00      F      82.22      C      355.37      K      
182.50      F      83.61      C      356.76      K      
185.00      F      85.00      C      358.15      K      
187.50      F      86.39      C      359.54      K      
190.00      F      87.78      C      360.93      K      
192.50      F      89.17      C      362.32      K      
195.00      F      90.56      C      363.71      K      
197.50      F      91.94      C      365.09      K      
200.00      F      93.33      C      366.48      K      
202.50      F      94.72      C      367.87      K      
205.00      F      96.11      C      369.26      K      
207.50      F      97.50      C      370.65      K      
210.00      F      98.89      C      372.04      K      
]0;jav86@gold29: ~/CS214/projects/09/ada[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/ada[00m$ ./temperature_tester
37.78      C      All tests passed!

To enter a start temperature... 
 Enter a degree: 0
 Enter a scale: K
To enter a stop temperature... 
 Enter a degree: 212
 Enter a scale: F
Enter a step value: 
20.0
-459.67      F      -273.15      C      0.00      K      
-423.67      F      -253.15      C      20.00      K      
-387.67      F      -233.15      C      40.00      K      
-351.67      F      -213.15      C      60.00      K      
-315.67      F      -193.15      C      80.00      K      
-279.67      F      -173.15      C      100.00      K      
-243.67      F      -153.15      C      120.00      K      
-207.67      F      -133.15      C      140.00      K      
-171.67      F      -113.15      C      160.00      K      
-135.67      F      -93.15      C      180.00      K      
-99.67      F      -73.15      C      200.00      K      
-63.67      F      -53.15      C      220.00      K      
-27.67      F      -33.15      C      240.00      K      
8.33      F      -13.15      C      260.00      K      
44.33      F      6.85      C      280.00      K      
80.33      F      26.85      C      300.00      K      
116.33      F      46.85      C      320.00      K      
152.33      F      66.85      C      340.00      K      
188.33      F      86.85      C      360.00      K      
]0;jav86@gold29: ~/CS214/projects/09/ada[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/ada[00m$ exit

Script done on 2022-03-19 20:02:12-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-19 20:44:03-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="105" LINES="30"]
]0;jav86@gold29: ~/CS214/projects/09/clojure[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/clojure[00m$ scr   cat temperatureTeset  ter.clj Temperature.clj
cat: temperatureTester.clj: No such file or directory
cat: Temperature.clj: No such file or directory
]0;jav86@gold29: ~/CS214/projects/09/clojure[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/clojure[00m$ cd src
]0;jav86@gold29: ~/CS214/projects/09/clojure/src[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/clojure/src[00m$ cd srcat temperatureTester.clj Temperature.clj
;; temperatureTester.clj tests a Clojure Name type,
;;  stored in Temperature.clj (in the src directory).
;;
;; Output: the results of testing the Temperature functions.
;;
;; Usage: clojure -m temperatureTester
;;
;; Completed by: Justin Voss
;; Date: 03/17/22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns temperatureTester)

;;(load "Temperature")
(load-file "src/Temperature.clj")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; A simple driver to test our Temperature functions. 
;; Output: the results of testing our Temperature functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
    (let
        [
            temp1 (make-Temperature 32.0 "F")
            temp2 (make-Temperature 0.0 "C")
            temp3 (make-Temperature 273.15 "K")
            temp4 (make-Temperature 100.0 "F")
        ]
    
    ;; testing toFahrenheit
    (println "Testing converter methods...")
    (assert (= (toFahrenheit temp1) temp1) "toFahrenheit(1) failed")
    (assert (= (toFahrenheit temp2) temp1) "toFahrenheit(1) failed")
    (assert (= (toFahrenheit temp3) temp1) "toFahrenheit(1) failed")

    (assert (= (toCelsius temp1) temp2) "toCelsius(1) failed")
    (assert (= (toCelsius temp2) temp2) "toCelsius(1) failed")
    (assert (= (toCelsius temp3) temp2) "toCelsius(1) failed")

    (assert (= (toKelvin temp1) temp3) "toKelvin(1) failed")
    (assert (= (toKelvin temp2) temp3) "toKelvin(1) failed")
    (assert (= (toKelvin temp3) temp3) "toKelvin(1) failed")

    (assert (equals temp1 temp2) "equals(1) failed")
    (assert (lessThan temp1 temp4) "equals(1) failed")

    (println "\nAll tests passed!\n")
    (println "\n Enter degrees and scale for baseTemp, ")
    (println "\n enter degrees and scale for limitTemp, ")
    (println "\n then finally enter a step value:\n")
    (let [baseTemp (readTemperature)  ;; initializes base limit and step values
        limitTemp (readTemperature)
        stepValue (read-string (read-line))]
        
        (if (or (checkValid (getDegrees baseTemp) (getScale baseTemp)) (checkValid (getDegrees limitTemp) (getScale limitTemp)))  ;; checks if it is a valid temperature
            (do
                (if ( < (getDegrees baseTemp) (getDegrees limitTemp))  
                    (printTable baseTemp limitTemp stepValue)
                (println "Error: base temp has to be greater than limit temp.")  ;; if the base is bigger than the limit, it produces an error
                )
            )
        (println "Error. Invalid argument")
        )
        )
    )
);; Temperature.clj is a module for our 'Temperature' type-abstraction.
;;
;; Completed by: Justin Voss
;; Date: 03/17/22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Create a record/struct type named Temperature
(defrecord Temperature [myDegrees myScale])


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; checkValid checks if an argument is valid
;; Receive: degrees and scale, a double and char
;; Return: true or false, based on if it is valid or not
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn checkValid [degrees scale]
    (if (or (and (= scale  "F") (>= degrees -459.67)) (and (= scale  "C") (>= degrees -273.15)) (and (= scale  "K") (>= degrees 0.0)))
      true
      false
    )
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; make-Temperature constructs a Temperature object.
;; Receive: degrees and scale, a double and char
;; Return: the Temperature (degrees scale). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-Temperature [degrees scale]
    (if (checkValid degrees scale)
    (->Temperature degrees (clojure.string/upper-case scale)) ;; converts the letter to an uppercase
    (print "Invalid argument.")
  ))
  
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; getDegrees extracts the degrees of a Temperature object.
  ;; Receive: aTemp, a Temperature
  ;; Return: degrees of the Temperature object
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defn getDegrees [aTemp]
    (:myDegrees aTemp)
  )
  
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; getDegrees extracts the scale of a Temperature object.
  ;; Receive: aTemp, a Temperature
  ;; Return: degrees of the Temperature object
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defn getScale [aTemp]
    (:myScale aTemp)
  )
  
 
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; toFahrenheit converts a Temperature to a new Temperature in Fahrenheit
  ;; Receive: aTemp, a Temperature object
  ;; Returns: a Temperature object, in Fahrenheit
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defn toFahrenheit [aTemp]
    (if (= (getScale aTemp) "C")
        (make-Temperature (+ (* (getDegrees aTemp) (/ 9.0 5.0)) 32) "F")
    (if (= (getScale aTemp) "K") 
            (make-Temperature (+ (* (- (getDegrees aTemp) 273.15) (/ 9.0 5.0)) 32) "F")
    (make-Temperature (getDegrees aTemp) (getScale aTemp))
        )
      )
  )

  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; ;; toCelsius converts a Temperature to a new Temperature in Celsius
  ;; ;; Receive: aTemp, a Temperature object
  ;; ;; Returns: a Temperature object, in Celsius
  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defn toCelsius [aTemp]
    (if (= (getScale aTemp) "F")
        (make-Temperature (* (- (getDegrees aTemp) 32) (/ 5.0 9.0)) "C")
    (if (= (getScale aTemp) "K") 
            (make-Temperature (- (getDegrees aTemp) 273.15) "C")
    (make-Temperature (getDegrees aTemp) (getScale aTemp))
        )
      )
  )

  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; ;; toKelvin converts a Temperature to a new Temperature in Kelvin
  ;; ;; Receive: aTemp, a Temperature object
  ;; ;; Returns: a Temperature object, in Kelvin
  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defn toKelvin [aTemp]
    (if (= (getScale aTemp) "F")
        (make-Temperature (+ (* (- (getDegrees aTemp) 32.0) (/ 5.0 9.0)) 273.15) "K")
    (if (= (getScale aTemp) "C") 
            (make-Temperature (+ (getDegrees aTemp) 273.15) "K")
    (make-Temperature (getDegrees aTemp) (getScale aTemp))
        )
      )
  )

 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; readTemperature reads a Temperature object from user input
  ;; 
  ;; Returns: a Temperature object, from user input
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defn readTemperature []
      (make-Temperature (read-string (read-line)) (read-line))
  )


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; printTemperature prints out a Temperature object
  ;; Receive: aTemp, a Temperature object
  ;; Returns: a Temperature object, in Fahrenheit
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defn printTemperature [aTemp]
    (print (str (format "%.2f" (double (getDegrees aTemp)) ) "\t" (getScale aTemp) "\t"))
  )

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; raise returns a Temperature with a degree amount higher than the Temperature received
  ;; Receive: aTemp, a Temperature object, and a double, moreDegrees
  ;; Returns: a Temperature object with a degree amount higher
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defn raise [aTemp moreDegrees]
    (make-Temperature (+ (getDegrees aTemp) moreDegrees) (getScale aTemp))
  )

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; lower returns a Temperature with a degree amount lower than the Temperature received
  ;; Receive: aTemp, a Temperature object, and a double, moreDegrees
  ;; Returns: a Temperature object with a degree amount lower
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defn lower [aTemp moreDegrees]
    (make-Temperature (- (getDegrees aTemp) moreDegrees) (getScale aTemp))
  )


 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; equals Checks if two Temps are equal
  ;; Receive: aTemp, a Temperature object, and another Temperature object aTemp2
  ;;  Returns: true if they are equal, false if the are not
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defn equals [aTemp aTemp2]
    (if (= (getScale aTemp) (getScale aTemp2))
      (= (getDegrees aTemp) (getDegrees aTemp2))
      (= (:myDegrees (toFahrenheit aTemp)) (:myDegrees (toFahrenheit aTemp2)))
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; lessThan checks if one temp is less than the other
  ;; Receive: aTemp, a Temperature object, and another Temperature object aTemp2
  ;;  Returns: true if left is less than, false if not
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defn lessThan [aTemp aTemp2]
    (if (= (getScale aTemp) (getScale aTemp2))
      (< (getDegrees aTemp) (getDegrees aTemp2))
      (< (:myDegrees (toFahrenheit aTemp)) (:myDegrees (toFahrenheit aTemp2)))
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; lessThan checks if one temp is less than the other
  ;; Receive: aTemp, a Temperature object, and another Temperature object aTemp2
  ;;  Returns: true if left is less than, false if not
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn printTable [baseTemp limitTemp stepValue]
  (loop
    [base baseTemp
    limit limitTemp
    step stepValue]
    (if (lessThan base limit)
      (do
        (printTemperature (toFahrenheit base))
        (printTemperature (toCelsius base))
        (printTemperature (toKelvin base))
        (println)
        (recur (raise base step) limitTemp stepValue)
      )
    )

  )
  
  )
]0;jav86@gold29: ~/CS214/projects/09/clojure/src[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/clojure/src[00m$ cd ..
]0;jav86@gold29: ~/CS214/projects/09/clojure[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/clojure[00m$ cd ..at temperatureTester.clj Temperature.cljd src[Kat temperatureTester.clj Temperature.clj[16Pruby TemperatureTester.rb[14@cat Temperature.rb TemperatureTester.rb[17Pjava TemperatureTestercat Temperature.rb TemperatureTester.rb[14Pruby TemperatureTester.rbcat temperatureTester.clj Temperature.cljd src[Kat temperatureTester.clj Temperature.cljd ..[K[Kclojure -m T temperatureTester
Testing converter methods...

All tests passed!


 Enter degrees and scale for baseTemp, 

 enter degrees and scale for limitTemp, 

 then finally enter a step value:

0
F
100
C
2.5
0.00	F	-17.78	C	255.37	K	
2.50	F	-16.39	C	256.76	K	
5.00	F	-15.00	C	258.15	K	
7.50	F	-13.61	C	259.54	K	
10.00	F	-12.22	C	260.93	K	
12.50	F	-10.83	C	262.32	K	
15.00	F	-9.44	C	263.71	K	
17.50	F	-8.06	C	265.09	K	
20.00	F	-6.67	C	266.48	K	
22.50	F	-5.28	C	267.87	K	
25.00	F	-3.89	C	269.26	K	
27.50	F	-2.50	C	270.65	K	
30.00	F	-1.11	C	272.04	K	
32.50	F	0.28	C	273.43	K	
35.00	F	1.67	C	274.82	K	
37.50	F	3.06	C	276.21	K	
40.00	F	4.44	C	277.59	K	
42.50	F	5.83	C	278.98	K	
45.00	F	7.22	C	280.37	K	
47.50	F	8.61	C	281.76	K	
50.00	F	10.00	C	283.15	K	
52.50	F	11.39	C	284.54	K	
55.00	F	12.78	C	285.93	K	
57.50	F	14.17	C	287.32	K	
60.00	F	15.56	C	288.71	K	
62.50	F	16.94	C	290.09	K	
65.00	F	18.33	C	291.48	K	
67.50	F	19.72	C	292.87	K	
70.00	F	21.11	C	294.26	K	
72.50	F	22.50	C	295.65	K	
75.00	F	23.89	C	297.04	K	
77.50	F	25.28	C	298.43	K	
80.00	F	26.67	C	299.82	K	
82.50	F	28.06	C	301.21	K	
85.00	F	29.44	C	302.59	K	
87.50	F	30.83	C	303.98	K	
90.00	F	32.22	C	305.37	K	
92.50	F	33.61	C	306.76	K	
95.00	F	35.00	C	308.15	K	
97.50	F	36.39	C	309.54	K	
100.00	F	37.78	C	310.93	K	
102.50	F	39.17	C	312.32	K	
105.00	F	40.56	C	313.71	K	
107.50	F	41.94	C	315.09	K	
110.00	F	43.33	C	316.48	K	
112.50	F	44.72	C	317.87	K	
115.00	F	46.11	C	319.26	K	
117.50	F	47.50	C	320.65	K	
120.00	F	48.89	C	322.04	K	
122.50	F	50.28	C	323.43	K	
125.00	F	51.67	C	324.82	K	
127.50	F	53.06	C	326.21	K	
130.00	F	54.44	C	327.59	K	
132.50	F	55.83	C	328.98	K	
135.00	F	57.22	C	330.37	K	
137.50	F	58.61	C	331.76	K	
140.00	F	60.00	C	333.15	K	
142.50	F	61.39	C	334.54	K	
145.00	F	62.78	C	335.93	K	
147.50	F	64.17	C	337.32	K	
150.00	F	65.56	C	338.71	K	
152.50	F	66.94	C	340.09	K	
155.00	F	68.33	C	341.48	K	
157.50	F	69.72	C	342.87	K	
160.00	F	71.11	C	344.26	K	
162.50	F	72.50	C	345.65	K	
165.00	F	73.89	C	347.04	K	
167.50	F	75.28	C	348.43	K	
170.00	F	76.67	C	349.82	K	
172.50	F	78.06	C	351.21	K	
175.00	F	79.44	C	352.59	K	
177.50	F	80.83	C	353.98	K	
180.00	F	82.22	C	355.37	K	
182.50	F	83.61	C	356.76	K	
185.00	F	85.00	C	358.15	K	
187.50	F	86.39	C	359.54	K	
190.00	F	87.78	C	360.93	K	
192.50	F	89.17	C	362.32	K	
195.00	F	90.56	C	363.71	K	
197.50	F	91.94	C	365.09	K	
200.00	F	93.33	C	366.48	K	
202.50	F	94.72	C	367.87	K	
205.00	F	96.11	C	369.26	K	
207.50	F	97.50	C	370.65	K	
210.00	F	98.89	C	372.04	K	
]0;jav86@gold29: ~/CS214/projects/09/clojure[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/clojure[00m$ clojure -m temperatureTester
Testing converter methods...

All tests passed!


 Enter degrees and scale for baseTemp, 

 enter degrees and scale for limitTemp, 

 then finally enter a step value:

0
K
212
F
20.0
-459.67	F	-273.15	C	0.00	K	
-423.67	F	-253.15	C	20.00	K	
-387.67	F	-233.15	C	40.00	K	
-351.67	F	-213.15	C	60.00	K	
-315.67	F	-193.15	C	80.00	K	
-279.67	F	-173.15	C	100.00	K	
-243.67	F	-153.15	C	120.00	K	
-207.67	F	-133.15	C	140.00	K	
-171.67	F	-113.15	C	160.00	K	
-135.67	F	-93.15	C	180.00	K	
-99.67	F	-73.15	C	200.00	K	
-63.67	F	-53.15	C	220.00	K	
-27.67	F	-33.15	C	240.00	K	
8.33	F	-13.15	C	260.00	K	
44.33	F	6.85	C	280.00	K	
80.33	F	26.85	C	300.00	K	
116.33	F	46.85	C	320.00	K	
152.33	F	66.85	C	340.00	K	
188.33	F	86.85	C	360.00	K	
]0;jav86@gold29: ~/CS214/projects/09/clojure[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/clojure[00m$ exit

Script done on 2022-03-19 20:45:15-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-19 20:05:37-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="105" LINES="30"]
]0;jav86@gold29: ~/CS214/projects/09/ruby[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/ruby[00m$ cat Tempr erature.rb TemperatureTester.rb
# Temperature.rb holds class Temperature and its operations
#
# Completed by: Justin Voss
# Date: 3/17/22
####################################################
module Temperatures
    class Temperature

        def initialize(myDegrees, myScale)
            if checkValid(myDegrees, myScale)
                @myDegrees, @myScale = myDegrees, myScale.upcase
            else puts "Error. Invalid scale."
            end

                
        end
    
        attr_accessor :myDegrees, :myScale
        
        def toFahrenheit()
            if @myScale == 'C'
                return Temperature.new((@myDegrees * (9.0 /5.0)) + 32.0, 'F')
            elsif @myScale == 'K' 
                return Temperature.new((@myDegrees - 273.15) * (9.0 /5.0) + 32, 'F')
            else 
                return Temperature.new(@myDegrees, @myScale)
            end
        end

        def toCelsius()
            if @myScale == 'F'
                return Temperature.new((@myDegrees - 32) * (5.0/9.0), 'C')
            elsif @myScale == 'K' 
                return Temperature.new((@myDegrees - 273.15), 'C')
            else 
                return Temperature.new(@myDegrees, @myScale)
            end
        end 

        def toKelvin()
            if @myScale == 'F'
                return Temperature.new((@myDegrees - 32) * (5.0/9.0) + 273.15, 'K')
            elsif @myScale == 'C' 
                return Temperature.new((@myDegrees + 273.15), 'K')
            else 
                return Temperature.new(@myDegrees, @myScale)
            end
        end 

        def readTemperature()
            puts "Enter a degree and scale with space in between: "
            input = gets.chomp
            split = input.split(" ")  # splits input into two parts
            @myDegrees = split[0].to_f
            @myScale = split[1]
        end


        def printTemperature
            print "#{'%.2f' % @myDegrees} #{@myScale.upcase} \t"
        end
    

        def raise(moreDegrees)
            return Temperature.new(@myDegrees + moreDegrees, @myScale)
        end


        def lower(moreDegrees)
            return Temperature.new(@myDegrees - moreDegrees, @myScale)
        end

        def equals(temp1, temp2)
            if temp1.myScale == temp2.myScale
                return (temp1.myDegrees == temp2.myDegrees)
            else
                return ((temp1.toFahrenheit.myDegrees == temp2.toFahrenheit.myDegrees))  # if not same scale, converts it to same scale
            end
        end

        def lessThan(temp1, temp2)
            if temp1.myScale == temp2.myScale
                return (temp1.myDegrees < temp2.myDegrees)
            else
                return ((temp1.toFahrenheit.myDegrees < temp2.toFahrenheit.myDegrees))  # if not same scale, converts it to same scale
            end
        end

        def makeTable(baseTemp, limitTemp, stepValue)
            base = baseTemp
            limit = limitTemp
            step = stepValue
            if (checkValid(baseTemp.myDegrees, baseTemp.myScale) && checkValid(limitTemp.myDegrees, limitTemp.myScale))  # checks for valid temp
            if base.lessThan(base, limit)
                while (base.lessThan(base,limit)) do  # loops to make table
                    base.toFahrenheit().printTemperature()
                    base.toCelsius().printTemperature()
                    base.toKelvin().printTemperature()
                    puts "\n"
                    base = base.raise(stepValue)
                end
                else 
                    puts "Error: base temp has to be greater than limit temp."
               end
            else puts "\nError:Invalid scale.\n"
            end
        end

        def checkValid(degrees, scale)
            upperCase = scale.upcase
            return (upperCase == 'F' && degrees >= -459.67)  || (upperCase == 'C' && degrees >= -273.15) || (upperCase == 'K' && degrees >= 0.0)
        end
     




  



    end
end# aTempTester.rb tests class Temperature and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Justin Voss
# Date: 3/17/22
####################################################

require 'test/unit/assertions'
include Test::Unit::Assertions

#require './Temperature'
load './Temperature.rb' # used load to load a program



def testTemperature
        # referenced the Temperatures module
        aTemp = Temperatures::Temperature.new(32.0, 'F') 
        aTemp2 = Temperatures::Temperature.new(0.0, 'C') 
        aTemp3 = Temperatures::Temperature.new(273.15, 'K')

        baseTemp = Temperatures::Temperature.new(0.0, 'F')
        limitTemp = Temperatures::Temperature.new(0.0, 'F')

        assert aTemp.myDegrees == 32.0, 
                "first failed"
        assert aTemp.myScale == 'F',
                "middle failed"
        
        print "All tests passed!\n"

        baseTemp.readTemperature
        limitTemp.readTemperature
        puts "Enter a step value: "
        stepValue = gets.chomp.to_f
        
        baseTemp.makeTable(baseTemp,limitTemp,stepValue) # makes the table
end

testTemperature]0;jav86@gold29: ~/CS214/projects/09/ruby[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/ruby[00m$ ruby TemperatureTester.rb
All tests passed!
Enter a degree and scale with space in between: 
0 F
Enter a degree and scale with space in between: 
100 C
Enter a step value: 
2.5
0.00 F 	-17.78 C 	255.37 K 	
2.50 F 	-16.39 C 	256.76 K 	
5.00 F 	-15.00 C 	258.15 K 	
7.50 F 	-13.61 C 	259.54 K 	
10.00 F 	-12.22 C 	260.93 K 	
12.50 F 	-10.83 C 	262.32 K 	
15.00 F 	-9.44 C 	263.71 K 	
17.50 F 	-8.06 C 	265.09 K 	
20.00 F 	-6.67 C 	266.48 K 	
22.50 F 	-5.28 C 	267.87 K 	
25.00 F 	-3.89 C 	269.26 K 	
27.50 F 	-2.50 C 	270.65 K 	
30.00 F 	-1.11 C 	272.04 K 	
32.50 F 	0.28 C 	273.43 K 	
35.00 F 	1.67 C 	274.82 K 	
37.50 F 	3.06 C 	276.21 K 	
40.00 F 	4.44 C 	277.59 K 	
42.50 F 	5.83 C 	278.98 K 	
45.00 F 	7.22 C 	280.37 K 	
47.50 F 	8.61 C 	281.76 K 	
50.00 F 	10.00 C 	283.15 K 	
52.50 F 	11.39 C 	284.54 K 	
55.00 F 	12.78 C 	285.93 K 	
57.50 F 	14.17 C 	287.32 K 	
60.00 F 	15.56 C 	288.71 K 	
62.50 F 	16.94 C 	290.09 K 	
65.00 F 	18.33 C 	291.48 K 	
67.50 F 	19.72 C 	292.87 K 	
70.00 F 	21.11 C 	294.26 K 	
72.50 F 	22.50 C 	295.65 K 	
75.00 F 	23.89 C 	297.04 K 	
77.50 F 	25.28 C 	298.43 K 	
80.00 F 	26.67 C 	299.82 K 	
82.50 F 	28.06 C 	301.21 K 	
85.00 F 	29.44 C 	302.59 K 	
87.50 F 	30.83 C 	303.98 K 	
90.00 F 	32.22 C 	305.37 K 	
92.50 F 	33.61 C 	306.76 K 	
95.00 F 	35.00 C 	308.15 K 	
97.50 F 	36.39 C 	309.54 K 	
100.00 F 	37.78 C 	310.93 K 	
102.50 F 	39.17 C 	312.32 K 	
105.00 F 	40.56 C 	313.71 K 	
107.50 F 	41.94 C 	315.09 K 	
110.00 F 	43.33 C 	316.48 K 	
112.50 F 	44.72 C 	317.87 K 	
115.00 F 	46.11 C 	319.26 K 	
117.50 F 	47.50 C 	320.65 K 	
120.00 F 	48.89 C 	322.04 K 	
122.50 F 	50.28 C 	323.43 K 	
125.00 F 	51.67 C 	324.82 K 	
127.50 F 	53.06 C 	326.21 K 	
130.00 F 	54.44 C 	327.59 K 	
132.50 F 	55.83 C 	328.98 K 	
135.00 F 	57.22 C 	330.37 K 	
137.50 F 	58.61 C 	331.76 K 	
140.00 F 	60.00 C 	333.15 K 	
142.50 F 	61.39 C 	334.54 K 	
145.00 F 	62.78 C 	335.93 K 	
147.50 F 	64.17 C 	337.32 K 	
150.00 F 	65.56 C 	338.71 K 	
152.50 F 	66.94 C 	340.09 K 	
155.00 F 	68.33 C 	341.48 K 	
157.50 F 	69.72 C 	342.87 K 	
160.00 F 	71.11 C 	344.26 K 	
162.50 F 	72.50 C 	345.65 K 	
165.00 F 	73.89 C 	347.04 K 	
167.50 F 	75.28 C 	348.43 K 	
170.00 F 	76.67 C 	349.82 K 	
172.50 F 	78.06 C 	351.21 K 	
175.00 F 	79.44 C 	352.59 K 	
177.50 F 	80.83 C 	353.98 K 	
180.00 F 	82.22 C 	355.37 K 	
182.50 F 	83.61 C 	356.76 K 	
185.00 F 	85.00 C 	358.15 K 	
187.50 F 	86.39 C 	359.54 K 	
190.00 F 	87.78 C 	360.93 K 	
192.50 F 	89.17 C 	362.32 K 	
195.00 F 	90.56 C 	363.71 K 	
197.50 F 	91.94 C 	365.09 K 	
200.00 F 	93.33 C 	366.48 K 	
202.50 F 	94.72 C 	367.87 K 	
205.00 F 	96.11 C 	369.26 K 	
207.50 F 	97.50 C 	370.65 K 	
210.00 F 	98.89 C 	372.04 K 	
]0;jav86@gold29: ~/CS214/projects/09/ruby[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/ruby[00m$ ruby TemperatureTester.rb
All tests passed!
Enter a degree and scale with space in between: 
0 K
Enter a degree and scale with space in between: 
212 F
Enter a step value: 
20.0
-459.67 F 	-273.15 C 	0.00 K 	
-423.67 F 	-253.15 C 	20.00 K 	
-387.67 F 	-233.15 C 	40.00 K 	
-351.67 F 	-213.15 C 	60.00 K 	
-315.67 F 	-193.15 C 	80.00 K 	
-279.67 F 	-173.15 C 	100.00 K 	
-243.67 F 	-153.15 C 	120.00 K 	
-207.67 F 	-133.15 C 	140.00 K 	
-171.67 F 	-113.15 C 	160.00 K 	
-135.67 F 	-93.15 C 	180.00 K 	
-99.67 F 	-73.15 C 	200.00 K 	
-63.67 F 	-53.15 C 	220.00 K 	
-27.67 F 	-33.15 C 	240.00 K 	
8.33 F 	-13.15 C 	260.00 K 	
44.33 F 	6.85 C 	280.00 K 	
80.33 F 	26.85 C 	300.00 K 	
116.33 F 	46.85 C 	320.00 K 	
152.33 F 	66.85 C 	340.00 K 	
188.33 F 	86.85 C 	360.00 K 	
]0;jav86@gold29: ~/CS214/projects/09/ruby[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/09/ruby[00m$ exit

Script done on 2022-03-19 20:06:25-04:00 [COMMAND_EXIT_CODE="0"]
