Script started on 2022-02-17 14:28:12-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ cat QuadRoots.java
/* QuadRoots.java computes the roots of a quadratic equation. 
 * 
 * Completed by: Justin Voss, 02/17/22
 ***************************************************************/

import java.util.Scanner;

// java class Split
public class QuadRoots
{
  // main program that calls the quadratic root checker and prints out the roots
  public static void main(String[] args)
    {
      Scanner keyboard = new Scanner(System.in);
    
      System.out.println("\nEnter a: ");  // asks the user for input
      double a = keyboard.nextInt();
      
      System.out.println("\nEnter b: ");  // asks the user for input
      double b = keyboard.nextInt();

      System.out.println("\nEnter c: ");  // asks the user for input
      double c = keyboard.nextInt();

      double[] roots = new double [2];  // makes a new array of size 2 to store the roots
      
      if (quadraticRoots(a,b,c,roots)) { // if the function returns true
        System.out.println("The roots are " + roots[0] + " and " + roots[1]); // prints out the roots 

      }
      
    }
  
  /* quadraticRoots() 
   * Receive: 	doubles a, b, c, and a double array root
   * Return:		Returns a boolean depending on if the root is valid or not. Also updates the root array to the root value.
   *****************************************************/
    public static Boolean quadraticRoots(double a, double b, double c, double [] roots)
        {
            if (a != 0) {
                double arg = Math.pow(b, 2.0) - 4 * a * c;
                if (arg >= 0) {
                   roots[0] = (-b + Math.sqrt(arg))/(2*a);  // adds the value to the first spot in the array
                   roots[1] = (-b - Math.sqrt(arg))/(2*a);  // adds the value to the second spot in the array
                   return true;
                } else {
                    System.out.println("\n*** quadraticRoots(): b^2 - 4ac is negative!" ); // prints out and returns false if the values are not valid
                    roots[0] = roots[1] = 0.0;
                   return false;
                }
             } else {
                System.out.println("\n*** QuadraticRoots(): a is zero!" );  // prints out and returns false if the values are not valid
                roots[0] = roots[1] = 0.0;
                return false;
             }
        }
}
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ javac -0 deprecation Quar dRoots.java
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ java Quadroots     Roots

Enter a: 
1

Enter b: 
10

Enter c: 
30

*** quadraticRoots(): b^2 - 4ac is negative!
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ java QuadRoots1
Error: Could not find or load main class QuadRoots1
Caused by: java.lang.ClassNotFoundException: QuadRoots1
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ java QuadRoots1
Error: Could not find or load main class QuadRoots1
Caused by: java.lang.ClassNotFoundException: QuadRoots1
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ java QuadRoots1 

Enter a: 
1

Enter b: 
20

Enter c: 
40
The roots are -2.254033307585166 and -17.745966692414832
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ java QuadRoots  

Enter a: 
1

Enter b: 
25

Enter c: 
45
The roots are -1.952488445135506 and -23.047511554864492
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ java QuadRoots

Enter a: 
1

Enter b: 
10

Enter c: 
20
The roots are -2.76393202250021 and -7.23606797749979
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ exit

Script done on 2022-02-17 14:30:54-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-17 15:33:32-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ cat s quad_roots.ada
cat: quad_roots.ada: No such file or directory
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ cat uq  quad_roots.adb
-- quad_roots.adb computes the roots of an equation
--
-- Input: floats a, b, c, root1, root2, and args
-- Output: The roots of the numbers given for the quadratic equation

-- Completed by: Justin Voss
-- Date: 02/17/22
--------------------------------------------------------------




with Ada.Text_IO, Ada.Float_Text_IO, Ada.Integer_Text_IO, Ada.Numerics.Elementary_Functions;
use  Ada.Text_IO, Ada.Float_Text_IO, Ada.Integer_Text_IO, Ada.Numerics.Elementary_Functions;


procedure quad_roots is
    a, b, c, args, root1, root2: Float;



    procedure quadratic_roots(a : in  Float; b : in Float; c : Float; root1 : out Float; root2 : out Float ) is  -- takes in many float values as parameters
        begin
            if a /= 0.0 then  -- checks if a is zero
                args := (b ** 2) - (4.0 * a * c); 
                if args >= 0.0 then
                    root1 := (-b + Sqrt(args)) / (2.0*a);
                    root2 := (-b - Sqrt(args)) / (2.0*a);
                else
                    Put("\n*** quadraticRoots(): b^2 - 4ac is negative!");
                    root1 := 0.0;  -- roots are reset to 0
                    root2 := 0.0;
                end if;
            else
                Put( "\n*** QuadraticRoots(): a is zero!");
                root1 := 0.0;    -- roots are reset to 0
                root2 := 0.0;
                
            end if;

        end quadratic_roots; 


begin                                           
    Put("Enter a: ");  -- Prompt for input
    Get(a);
    Put("Enter b: ");
    Get(b);
    Put("Enter c: ");
    Get(c);
    quadratic_roots(a, b, c, root1, root2);  -- calls the function
    if root1 /= 0.0 then    -- compares root1 to zero to check if the roots are valid. They are reset to 0 if they are not valid.
        Put("Roots are ");  -- only prints out when the roots are valid
        Put(root1);
        Put(" and ");
        Put(root2);
    end if;
end quad_roots;]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ gnatmake quad_roots.adb
gnatmake: "quad_roots" up to date.
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ ./quadA+  _roots
Enter a: 1
Enter b: 4
Enter c: 3
Roots are -1.00000E+00 and -3.00000E+00
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ ./quad_roots
Enter a: 1
Enter b: 20
Enter c: 40
Roots are -2.25403E+00 and -1.77460E+01
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ ./quad_roots
Enter a: 0
Enter b: 10
Enter c: 0 409 
\n*** QuadraticRoots(): a is zero!
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ ./quad_roots
Enter a: 1
Enter b: 2
Enter c: 3
\n*** quadraticRoots(): b^2 - 4ac is negative!
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ exit

Script done on 2022-02-17 15:35:02-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-17 16:03:33-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="106" LINES="24"]
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ cat s quad_roots.rb
# quad_roots.rb computes the roots of a quadratic equation
#
# Input:
# Precondition: 
# Output: The roots from the values given for a quadratic equation
#
# Completed by: Justin Voss
# Date: 2/17/22
#################################################################


# quadratic_roots computes the roots of a quadratic equation
# Receive: numbers a,b, and c                    
# Return: An array, roots, with the values of root1 and root2
######################################################
def quadratic_roots(a, b, c)
    if a != 0
        arg = (b**2.0) - (4 * a * c);
        if arg >= 0
            root1 = (-b + Math.sqrt(arg)) / (2*a);
            root2 = (-b - Math.sqrt(arg)) / (2*a);
        else
            puts "\n*** quadraticRoots(): b^2 - 4ac is negative!"
            root1 = root2 = 0.0;
        end
    else
        puts ("\n*** QuadraticRoots(): a is zero!");
        root = root2 = 0.0;
    end 
    roots = [root1, root2] # adds the roots to an array called roots
    return roots 

end

# Driver program, which prints out the roots
if __FILE__ == $0
    print "Enter a:"
    a = gets.to_f # gets input value
    print "Enter b:"
    b = gets.to_f # gets input value
    print "Enter c:"
    c = gets.to_f # gets input value
    roots = quadratic_roots(a, b, c);
    if roots[0] != 0 && roots[1] != 0 # Only prints the roots if they are valid
        puts "The roots are #{ roots[0] } and #{ roots[1] }" # prints out the statement
    end
end]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ ruby    ruby s quad_roots.rb
Enter a:1
Enter b:2
Enter c:3

*** quadraticRoots(): b^2 - 4ac is negative!
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ ruby quad_roots.rb
Enter a:1 0
Enter b:2
Enter c:3

*** QuadraticRoots(): a is zero!
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ ruby quad_roots.rb
Enter a:1
Enter b:4
Enter c:3
The roots are -1.0 and -3.0
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ ruby quad_roots.rb
Enter a:1
Enter b:20
Enter c:40
The roots are -2.254033307585166 and -17.745966692414832
]0;jav86@gold17: ~/CS214/projects/06[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06[00m$ exit

Script done on 2022-02-17 16:04:28-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-02-17 17:27:19-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="106" LINES="24"]
cat s quad)  d_roots.clj
]0;jav86@gold17: ~/CS214/projects/06/clojure/src[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06/clojure/src[00m$ cat quad_roots.clj
;;;; quad_roots.clj computes the roots of an equation given by values from the user.
;;;;
;;;; Input: integers a, b, c
;;;;    
;;;; Output: the roots of the equation
;;;;
;;;; Usage: clojure -m quad_roots
;;;;
;;;; Completed by: Justin Voss
;;;; Date: 02/17/22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(ns quad_roots)      ; name the program


;; uses ints a, b and c to compute the roots of an equation from user inputted numbers
(defn quadratic_roots [a,b,c]
    (if (not= a 0) ;; if a is not 0
      (do
        (let [arg (- (Math/pow b 2) (* 4 a c))]  ;; the let statement allows us to put values to variables
          (if (>= arg 0) ;; compares arg and 0
            (do
              (let [root1( / (+ (- b) (Math/sqrt arg) ) (* 2 a))  ;; clojure operations for quad formula
                    root2 ( / (- (- b) (Math/sqrt arg) )  (* 2 a))]
                (vector root1 root2)) ;; puts the two roots into a vector
              )
            (do

              (let [root1 0 root2 0]  ;; if arg is less than 0, the roots are turned to zero and an error message is printed
                (vector root1 root2) 
                (print "\n*** quadraticRoots(): b^2 - 4ac is negative!\n"))))))

      (do
        
        (let [root1 0 root2 0]  ;; if a is zero, then the roots are set as zero, and an error message is returned
          (vector root1 root2)
          (print "\n*** QuadraticRoots(): a is zero!\n"))))
  
    
)



;;; main function
(defn -main []
    (print "Enter a: ") (flush)   ;; gets input values
    (let
        [ a (read) ]
        (print "Enter a: ") (flush)  
        (let
            [ b (read) ]
            (print "Enter a: ") (flush)  
            (let 
                [c (read)   ;; assigns the returned value of the quadradic_roots function to results. Then root1 and root2 get assigned values of result
                result (quadratic_roots a b c)
                root1 (get result 0)
                root2 (get result 1)]
              
              (if (not= root1 nil)
                (if (not= root2 nil)
                (printf (str "\nThe roots are  %s and %s \n")  ;; prints out the roots
                        root1 root2))
              )
            )
        )
    )
)
]0;jav86@gold17: ~/CS214/projects/06/clojure/src[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06/clojure/src[00m$ cd ..
]0;jav86@gold17: ~/CS214/projects/06/clojure[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06/clojure[00m$ \ clojure -m quq ad_roots
Enter a: 1 0
Enter a: 0
Enter a: 0

*** QuadraticRoots(): a is zero!
]0;jav86@gold17: ~/CS214/projects/06/clojure[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06/clojure[00m$ clojure -m quad_roots
Enter a: 1
Enter a: 1
Enter a: 1

*** quadraticRoots(): b^2 - 4ac is negative!
]0;jav86@gold17: ~/CS214/projects/06/clojure[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06/clojure[00m$ clojure -m quad_roots
Enter a: 1
Enter a: 4
Enter a: 3

The roots are  -1.0 and -3.0 
]0;jav86@gold17: ~/CS214/projects/06/clojure[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06/clojure[00m$ clojure -m quad_roots
Enter a: 1
Enter a: 20
Enter a: 40

The roots are  -2.254033307585166 and -17.745966692414832 
]0;jav86@gold17: ~/CS214/projects/06/clojure[01;32mjav86@gold17[00m:[01;34m~/CS214/projects/06/clojure[00m$ exit

Script done on 2022-02-17 17:28:08-05:00 [COMMAND_EXIT_CODE="0"]
