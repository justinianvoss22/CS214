Script started on 2022-03-24 15:43:08-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="119" LINES="24"]
]0;jav86@gold29: ~/CS214/projects/10/java[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/10/java[00m$ B cat c i Birds.java Bird.java WalkingBird.java Penguin.java Ostrich.java Kiwil.  .java Fl yingi Bird.java Duck.java Goose.java Owl.java
/* Birds.java illustrates inheritance and polymorphism.
 *
 * Begun by: Joel Adams, for CS 214 Lab 10 at Calvin College.
 * Completed by: Justin Voss
 * Date: 03/24/2022
 *********************************************************/

public class Birds {
  
  public static void main(String[] args) {

      System.out.println("\nWelcome to the Bird Park!\n");

      Duck bird2 = new Duck("Donald");
      bird2.print();

      Goose bird3 = new Goose("Mother Goose");
      bird3.print();

      Owl bird4 = new Owl("Woodsey");
      bird4.print();

      Ostrich bird5 = new Ostrich("Oliver");
      bird5.print();

      Penguin bird6 = new Penguin("Pingu");
      bird6.print();

      Kiwi bird7 = new Kiwi("Ninja");
      bird7.print();

      System.out.println();
    }
}

/* Bird.java provides a Bird class.
 *
 * Completed by: Justin Voss
 * Date: 03/24/2022
 ******************************************************/

import java.io.*;

public abstract class Bird
{

 /* default constructor
  * PostCond: myName == "".
  */
  public Bird()
  {
    myName = "";
  }

 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */

  public Bird(String name)
  {
    myName = name;
  } 


 /* Name accessor
  * Return: myName.
  */
  public String getName()
  {
    return myName;
  } 

 /* A Bird's Call
  * Return: a default bird-call ("Squawk!").
  */
  public String call()
  {
    return "Squaaaaaaaaaawk!";
  } 

  public abstract String movement();

 /* Output a Bird 
  * Output: Everything known about myself
  *          to the standard output stream.
  */

  public void print()
  {
    System.out.println( getName() + ' ' + getClass().getName() + " just " + movement()
                           + " and said, " + call() );
  } 


  private String myName;
}

/* WalkingBird.java provides a Bird class.
 *
 * Completed by: Justin Voss
 * Date: 03/24/2022
 ******************************************************/


public class WalkingBird extends Bird {
    public WalkingBird() {
        super();
     }

     public WalkingBird(String name)
     {     
        super(name);
     } 

     public String movement(){
         return "walked";
     }
}/* Penguin.java provides a Duck subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Justin Voss
 * Date: 03/24/2022
 ******************************************************/

public class Penguin extends WalkingBird {

    public Penguin()
     {
        super();
     }
   /* explicit constructor
    * Receive: name, a String 
    * PostCond: myName == name.
    */
    public Penguin(String name)
    {     
      super(name);
    } 
  
  
   /* A Penguin's Call
    * Return: a Penguin-call ("WHEH! WHEH!").
    */
    public String call()
    {
      return "NOOT NOOT!";
    } 
  } /* Ostrich.java provides a Duck subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Justin Voss
 * Date: 03/24/2022
 ******************************************************/

public class Ostrich extends WalkingBird {

    public Ostrich()
     {
        super();
     }
   /* explicit constructor
    * Receive: name, a String 
    * PostCond: myName == name.
    */
    public Ostrich(String name)
    {     
      super(name);
    } 
  
  
   /* A Ostrich's Call
    * Return: a Ostrich-call ("WHAAAA!!").
    */
    public String call()
    {
      return "WHAAAA!!";
    } 
  } /* Kiwi.java provides a Duck subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Justin Voss
 * Date: 03/24/2022
 ******************************************************/

public class Kiwi extends WalkingBird {

  public Kiwi()
   {
      super();
   }
 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
  public Kiwi(String name)
  {     
    super(name);
  } 


 /* A Kiwi's Call
  * Return: a Kiwi-call ("Kiiii! Kiiii!!").
  */
  public String call()
  {
    return "Kiiii! Kiiii!!";
  } 
} 

/* FlyingBird.java provides a Bird class.
 *
 * Completed by: Justin Voss
 * Date: 03/24/2022
 ******************************************************/

public class FlyingBird extends Bird {
    public FlyingBird() {
        super();
     }

     public FlyingBird(String name)
     {     
        super(name);
     } 

     public String movement(){
         return "flew";
     }
}/* Duck.java provides a Duck subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Justin Voss
 * Date: 03/24/2022
 ******************************************************/

public class Duck extends FlyingBird {
    


  public Duck() {
    super();
 }
 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
 
 public Duck(String name)
 {     
    super(name);
 } 

 /* A Duck's Call
  * Return: a duck-call ("Quack!").
  */
  public String call()
  {
    return "Quack!";
  } 

}

/* Goose.java provides a Goose subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Justin Voss
 * Date: 03/24/2022
 ******************************************************/

public class Goose extends FlyingBird {

  public Goose()
   {
      super();
   }
 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
  public Goose(String name)
  {     
    super(name);
  } 


 /* A Goose's Call
  * Return: a goose-call ("Honk!").
  */
  public String call()
  {
    return "Honk!";
  } 
} 

/* Owl.java provides an Owl subclass of Bird.
 *
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Completed by: Justin Voss
 * Date: 03/24/2022
 ******************************************************/

public class Owl extends FlyingBird {
  public Owl(){
    super();
  }
 /* explicit constructor
  * Receive: name, a String 
  * PostCond: myName == name.
  */
  public Owl(String name){
    super(name);
  }


 /* An Owl's Call
  * Return: an owl-call ("Whoo-hoo!").
  */
  public String call()
  {
    return "Hoo! Hoo!";
  }
} 

]0;jav86@gold29: ~/CS214/projects/10/java[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/10/java[00m$ [Kmake Birds
javac -deprecation Birds.java
]0;jav86@gold29: ~/CS214/projects/10/java[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/10/java[00m$ make    jha  ava Birds

Welcome to the Bird Park!

Donald Duck just flew and said, Quack!
Mother Goose Goose just flew and said, Honk!
Woodsey Owl just flew and said, Hoo! Hoo!
Oliver Ostrich just walked and said, WHAAAA!!
Pingu Penguin just walked and said, NOOT NOOT!
Ninja Kiwi just walked and said, Kiiii! Kiiii!!

]0;jav86@gold29: ~/CS214/projects/10/java[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/10/java[00m$ exit

Script done on 2022-03-24 15:43:49-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-24 15:40:37-04:00 [TERM="xterm-256color" TTY="/dev/pts/1" COLUMNS="119" LINES="24"]
]0;jav86@gold29: ~/CS214/projects/10/ada[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/10/ada[00m$ cat bird_package.adb bird_package.ads birds.adb kiwi_package.adb kiwi_package.ads  ostrich_package.adb ostrich_package.ads penguin_package.adb penguin_package.ads duc_package.adb duck_package.ads flyin g_bird_package.adb flying_bird+ _package.ads walking_bird_package.d adb walkinbg  g_bird_pacika   kac ge.ads
-- bird_package.adb gives Bird-related definitions
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Justin Voss
-- Date: 03/24/2022
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Bird_Package is


 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type in which My_Name = Name.    -
 ----------------------------------------------------
 procedure Init(A_Bird : out Bird_Type; Name : in String) is
   begin
    A_Bird.My_Name := Name;
   end Init;
 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------
function Name(A_Bird : in Bird_Type) return String is
   begin
    return A_Bird.My_Name;
   end Name;
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------
function Call(A_Bird : in Bird_Type) return String is
   begin
    return "Squawwwwwwk!";
   end Call;

 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------
function Type_Name(A_Bird : in Bird_Type) return String is
   begin
    return "Bird";
   end Type_Name;

 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------
function Movement(A_Bird : in Bird_Type) return String is
   begin
    return "ran";
   end Movement;


 ----------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------
 procedure Put(A_Bird : in Bird_Type'Class) is
   begin
    Put( Name(A_Bird) );
    Put( ' ' );
    Put( Type_Name(A_Bird) );
    Put( ' ' );
    Put(Movement(A_Bird));
    Put( " and said " );
    Put( Call(A_Bird) );
   end Put; 

end Bird_Package;

-- bird_package.ads gives Bird-related declarations
--
-- Begun by: Dr. Adams, for CS 214 at Calvin College.
-- Completed by: Justin Voss
-- Date: 03/24/2022
---------------------------------------------------

package Bird_Package is
type Bird_Type is tagged private;

 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type whose My_Name = Name.       -
 ----------------------------------------------------
procedure Init(A_Bird : out Bird_Type; Name : in String);
 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------
function  Name(A_Bird : in Bird_Type) return String;
 ----------------------------------------------------
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------
function  Call(A_Bird : in Bird_Type) return String;
 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------
function  Type_Name(A_Bird : in Bird_Type) return String;
 ----------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------

 function Movement(A_Bird : in Bird_Type) return String;

 
 procedure Put(A_Bird : in Bird_Type'Class);

private
type Bird_Type is
          tagged record
            My_Name : String(1..6);
          end record;

end Bird_Package;
-- birds.adb tests our Birds type hierarchy.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College
-- Completed by: Justin Voss
-- Date: 03/24/2022
---------------------------------------------------

with Bird_Package, 
      Duck_Package, 
      Goose_Package, 
      Owl_Package,
      Ostrich_Package,
      Penguin_Package,
      Kiwi_Package,
      Flying_Bird_Package,
      Walking_Bird_Package,
      Ada.Text_IO;
use Bird_Package,
      Duck_Package, 
      Goose_Package,
      Owl_Package,
      Ostrich_Package,
      Penguin_Package,
      Kiwi_Package,
      Walking_Bird_Package,
      Flying_Bird_Package,
      Ada.Text_IO;


procedure Birds is

 Bird1 : Bird_Type;       -- base class
 Bird2 : Duck_Type;       -- derived class 1
 Bird3 : Goose_Type;      -- derived class 2
 Bird4 : Owl_Type;        -- derived class 3
 Bird5 : Ostrich_Type;
 Bird6 : Penguin_Type;
 Bird7 : Kiwi_Type;

begin
   Put("Welcome to the Bird Park!");
   New_Line;
 Init(Bird1, "Tweety");
 Put(Bird1); New_Line;

 Init(Bird2, "Donald");
 Put(Bird2); New_Line;

 Init(Bird3, "Mother");
 Put(Bird3); New_Line;

 Init(Bird4, "Woodsy");
 Put(Bird4); New_Line;

Init(Bird5, "Ozzie ");
 Put(Bird5); New_Line;

 Init(Bird6, "Pingu ");
 Put(Bird6); New_Line;

 Init(Bird7, "Ninja ");
 Put(Bird7); New_Line;
 

 New_Line;
end Birds;

-- kiwi_package.adb gives Kiwi-related definitions
--  by over-riding Bird-related definitions.
-- Completed by: Justin Voss
-- Date: 03/24/2022
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Kiwi_Package is

 ----------------------------------------------------
 -- A Kiwi's Call (Over-rides Bird.Call())          -
 -- Receive: A_Kiwi, a Kiwi_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
function Call(A_Kiwi : in Kiwi_Type) return String is
   begin
    return "KIII! KIII!";
   end Call;

 ------------------------------------------------------------
 -- Determine type of a Kiwi (Over-rides Bird.Type_Name()) -
 -- Receive: A_Kiwi, a Kiwi_Type.                          -
 -- Return: "Kiwi".                                        -
 -----------------------------------------------------------
 function Type_Name(A_Kiwi : in Kiwi_Type) return String is
   begin
    return "Kiwi";
   end Type_Name;

end Kiwi_Package;
-- kiwi_package.ads gives Kiwi-related declarations,
--  and derives Kiwi from Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Justin Voss
-- Date: 03/24/2022
---------------------------------------------------
with Bird_Package; use Bird_Package;
with Walking_Bird_Package; use Walking_Bird_Package;

package Kiwi_Package is
type Kiwi_Type is new Walking_Bird with private;

 ----------------------------------------------------
 -- A Kiwi's Call (Over-rides Bird.Call())          -
 -- Receive: A_Kiwi, a Kiwi_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
function  Call(A_Kiwi : in Kiwi_Type) return String;

 ------------------------------------------------------------
 -- Determine type of a Kiwi (Over-rides Bird.Type_Name()) -
 -- Receive: A_Kiwi, a Kiwi_Type.                          -
 -- Return: "Kiwi".                                        -
 -----------------------------------------------------------
function  Type_Name(A_Kiwi : in Kiwi_Type) return String;

private
 type Kiwi_Type is new Walking_Bird with
          record
            null;
          end record;

end Kiwi_Package;-- ostrich_package.adb gives Ostrich-related definitions
--  by over-riding Bird-related definitions.
-- Completed by: Justin Voss
-- Date: 03/24/2022
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Ostrich_Package is

 ----------------------------------------------------
 -- A Ostrich's Call (Over-rides Bird.Call())          -
 -- Receive: A_Ostrich, a Ostrich_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
function Call(A_Ostrich : in Ostrich_Type) return String is
   begin
    return "WHAAAA!";
   end Call;

 ------------------------------------------------------------
 -- Determine type of a Ostrich (Over-rides Bird.Type_Name()) -
 -- Receive: A_Ostrich, a Ostrich_Type.                          -
 -- Return: "Ostrich".                                        -
 -----------------------------------------------------------
 function Type_Name(A_Ostrich : in Ostrich_Type) return String is
   begin
    return "Ostrich";
   end Type_Name;

end Ostrich_Package;

-- ostrich_package.ads gives Ostrich-related declarations,
--  and derives Ostrich from Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Justin Voss
-- Date: 03/24/2022
---------------------------------------------------

with Bird_Package; use Bird_Package;
with Walking_Bird_Package; use Walking_Bird_Package;

package Ostrich_Package is
type Ostrich_Type is new Walking_Bird with private;

 ----------------------------------------------------
 -- A Ostrich's Call (Over-rides Bird.Call())          -
 -- Receive: A_Ostrich, a Ostrich_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
function  Call(A_Ostrich : in Ostrich_Type) return String;

 ------------------------------------------------------------
 -- Determine type of a Ostrich (Over-rides Bird.Type_Name()) -
 -- Receive: A_Ostrich, a Ostrich_Type.                          -
 -- Return: "Ostrich".                                        -
 -----------------------------------------------------------
function  Type_Name(A_Ostrich : in Ostrich_Type) return String;

private
 type Ostrich_Type is new Walking_Bird with
          record
            null;
          end record;

end Ostrich_Package;-- penguin_package.adb gives Penguin-related definitions
--  by over-riding Bird-related definitions.
-- Completed by: Justin Voss
-- Date: 03/24/2022
---------------------------------------------------
with Ada.Text_IO;
use Ada.Text_IO;

package body Penguin_Package is

 ----------------------------------------------------
 -- A Penguin's Call (Over-rides Bird.Call())          -
 -- Receive: A_Penguin, a Penguin_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
function Call(A_Penguin : in Penguin_Type) return String is
   begin
    return "NOOK NOOK!";
   end Call;

 ------------------------------------------------------------
 -- Determine type of a Penguin (Over-rides Bird.Type_Name()) -
 -- Receive: A_Penguin, a Penguin_Type.                          -
 -- Return: "Penguin".                                        -
 -----------------------------------------------------------
 function Type_Name(A_Penguin : in Penguin_Type) return String is
   begin
    return "Penguin";
   end Type_Name;

end Penguin_Package;
-- penguin_package.ads gives Penguin-related declarations,
--  and derives Penguin from Bird.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Justin Voss
-- Date: 03/24/2022
---------------------------------------------------
with Bird_Package; use Bird_Package;
with Walking_Bird_Package; use Walking_Bird_Package;

package Penguin_Package is
type Penguin_Type is new Walking_Bird with private;

 ----------------------------------------------------
 -- A Penguin's Call (Over-rides Bird.Call())          -
 -- Receive: A_Penguin, a Penguin_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
function  Call(A_Penguin : in Penguin_Type) return String;

 ------------------------------------------------------------
 -- Determine type of a Penguin (Over-rides Bird.Type_Name()) -
 -- Receive: A_Penguin, a Penguin_Type.                          -
 -- Return: "Penguin".                                        -
 -----------------------------------------------------------
function  Type_Name(A_Penguin : in Penguin_Type) return String;

private
 type Penguin_Type is new Walking_Bird with
          record
            null;
          end record;

end Penguin_Package;cat: duc_package.adb: No such file or directory
-- duck_package.ads gives Duck-related declarations,
--
--  and derives Duck from Bird.
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: Justin Voss
-- Date: 03/24/2022
---------------------------------------------------

with Bird_Package; use Bird_Package;
with Flying_Bird_Package; use Flying_Bird_Package;

package Duck_Package is
type Duck_Type is new Flying_Bird with private;

 ----------------------------------------------------
 -- A Duck's Call (Over-rides Bird.Call())          -
 -- Receive: A_Duck, a Duck_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
function  Call(A_Duck : in Duck_Type) return String;

 ------------------------------------------------------------
 -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 -- Receive: A_Duck, a Duck_Type.                          -
 -- Return: "Duck".                                        -
 -----------------------------------------------------------
function  Type_Name(A_Duck : in Duck_Type) return String;

private
 type Duck_Type is new Flying_Bird with
          record
            null;
          end record;

end Duck_Package;
-- flying_bird_package.adb gives Flying_Bird-related definitions
--  by over-riding Bird-related definitions.
-- Completed by: Justin Voss
-- Date: 03/24/2022
---------------------------------------------------

package body Flying_Bird_Package is

 ----------------------------------------------------
 -- A Goose's Movement (Over-rides Bird.Movement())         -
 -- Receive: A_Flying_Bird                    -
 -- Return: "flew"                                 -
 ----------------------------------------------------
 function  Movement(A_Flying_Bird : in Flying_Bird) return String is
    begin
        return "flew";
    end Movement;

end Flying_Bird_Package;
-- flying_bird_package.ads gives flying-related declarations,
--
--  and derives Flying_Bird from Bird.
-- Completed by: Justin Voss
-- Date: 03/24/2022
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Flying_Bird_Package is

  type Flying_Bird is new Bird_Type with private;


 ----------------------------------------------------
 -- A Goose's Movement (Over-rides Bird.Movement())         -
 -- Receive: A_Flying_Bird                    -
 -- Return: "flew"                                 -
 ----------------------------------------------------
 function  Movement(A_Flying_Bird : in Flying_Bird) return String;


private
 type Flying_Bird is new Bird_Type with
          record
            null;
          end record;

end Flying_Bird_Package;-- walking_bird_package.adb gives Flying_Bird-related definitions
--  by over-riding Bird-related definitions.
-- Completed by: Justin Voss
-- Date: 03/24/2022
---------------------------------------------------

package body Walking_Bird_Package is

 ----------------------------------------------------
 -- A Goose's Movement (Over-rides Bird.Movement())         -
 -- Receive: A_Walking_Bird                    -
 -- Return: "flew"                                 -
 ----------------------------------------------------
 function  Movement(A_Walking_Bird : in Walking_Bird) return String is
    begin
        return "walked";
    end Movement;

end Walking_Bird_Package;
-- walking_bird_package.ads gives walking-related declarations,
--
--  and derives Walking_Bird from Bird.
-- Completed by: Justin Voss
-- Date: 03/24/2022
---------------------------------------------------

with Bird_Package; use Bird_Package;

package Walking_Bird_Package is

  type Walking_Bird is new Bird_Type with private;


 ----------------------------------------------------
 -- A Goose's Movement (Over-rides Bird.Movement())         -
 -- Receive: A_Walking_Bird                    -
 -- Return: "flew"                                 -
 ----------------------------------------------------
 function  Movement(A_Walking_Bird : in Walking_Bird) return String;


private
 type Walking_Bird is new Bird_Type with
          record
            null;
          end record;

end Walking_Bird_Package;]0;jav86@gold29: ~/CS214/projects/10/ada[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/10/ada[00m$ [Kgnatmake birds.adb
gnatmake: "birds" up to date.
]0;jav86@gold29: ~/CS214/projects/10/ada[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/10/ada[00m$ ./birds
Welcome to the Bird Park!
Tweety Bird ran and said Squawwwwwwk!
Donald Duck flew and said Quack!
Mother Goose flew and said Honk!
Woodsy Owl flew and said Hoo! Hoo!!
Ozzie  Ostrich walked and said WHAAAA!
Pingu  Penguin walked and said NOOK NOOK!
Ninja  Kiwi walked and said KIII! KIII!

]0;jav86@gold29: ~/CS214/projects/10/ada[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/10/ada[00m$ exit

Script done on 2022-03-24 15:42:20-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-24 15:39:07-04:00 [TERM="xterm-256color" TTY="/dev/pts/2" COLUMNS="119" LINES="24"]
]0;jav86@gold29: ~/CS214/projects/10/ruby[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/10/ruby[00m$ cat birds.rb Bird.rb WalkingBird.rb FlyingBird.rb kiwi.rb ostrih.   ch  ich.rb penu guin.rb  duck.rb goose.rb owl.rb
# birds.rb | Tests out the menagerie of bird classes.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
## Completed by: Justin Voss
## Date: 03/24/22
######################################################

require './Bird.rb'
require './duck.rb'
require './goose.rb'
require './owl.rb'
require './ostrich.rb'
require './penguin.rb'
require './kiwi.rb'
require './FlyingBird.rb'
require './WalkingBird.rb'

puts "\nWelcome to the Bird Park!\n\n"

bird0 = Bird.new "Hawkeye"
bird0.print

bird1 = Duck.new "Donald"
bird1.print

bird2 = Goose.new "Mother"
bird2.print

bird3 = Owl.new "Woodsey"
bird3.print

bird4 = Ostrich.new "Ozzie"
bird4.print

bird5 = Penguin.new "Pingu"
bird5.print

bird6 = Kiwi.new "Ninja"
bird6.print

puts "\n\n"
# Bird.rb | Defines a Bird superclass 
#   to be extended by specific bird sub-classes.
#### Begun by: Prof. Adams, for CS 214 at Calvin College.
## Completed by: Justin Voss
## Date: 03/24/22
#########################################################

class Bird

    attr_reader :name
  
    def initialize(name)
      @name = name
    end
  
    def call
        'Squaaaaaaawk!'
      end
    
      def className
        self.class.to_s
      end

      def movement
        'ran'
      end
    
      def print
        puts name + + ' ' + className + ' ' + movement + " and said " + call
      end
  end
  #### WalkingBird.rb provides a Duck "class".
#### 
#### Begun by: Prof. Adams, for CS 214 at Calvin College.
## Completed by: Justin Voss
## Date: 03/24/22
#########################################################
require './Bird.rb'
class WalkingBird < Bird
    def movement
        'walked'
      end

end#### FlyingBird.rb provides a Duck "class".
#### 
#### Begun by: Prof. Adams, for CS 214 at Calvin College.
## Completed by: Justin Voss
## Date: 03/24/22
#########################################################
require './Bird.rb'
class FlyingBird < Bird
    def movement
        'flew'
      end

end#### kiwi.rb provides a Kiwi "class".
#### 
#### Begun by: Prof. Adams, for CS 214 at Calvin College.
## Completed by: Justin Voss
## Date: 03/24/22
#########################################################
require './Bird.rb'
require './WalkingBird.rb'
class Kiwi < WalkingBird
    def call
        'KIII! KIII!'
      end


end#### ostrich.rb provides a Ostrich "class".
#### 
#### Begun by: Prof. Adams, for CS 214 at Calvin College.
## Completed by: Justin Voss
## Date: 03/24/22
#########################################################
require './Bird.rb'
require './WalkingBird.rb'
class Ostrich < WalkingBird
    def call
        'WAHHHHH!'
      end


end#### penguin.rb provides a Penguin "class".
#### 
#### Begun by: Prof. Adams, for CS 214 at Calvin College.
## Completed by: Justin Voss
## Date: 03/24/22
#########################################################
require './Bird.rb'
require './WalkingBird.rb'
class Penguin < WalkingBird
    def call
        'NOOT NOOT!'
      end
end#### duck.rb provides a Duck "class".
#### 
#### Begun by: Prof. Adams, for CS 214 at Calvin College.
## Completed by: Justin Voss
## Date: 03/24/22
#########################################################
require './Bird.rb'
require './FlyingBird.rb'
class Duck < FlyingBird
    def call
        'QUAAAACK!'
      end


end#### goose.rb provides a Goose "class".
#### 
#### Begun by: Prof. Adams, for CS 214 at Calvin College.
## Completed by: Justin Voss
## Date: 03/24/22
#########################################################
require './Bird.rb'
require './FlyingBird.rb'
class Goose < FlyingBird
    def call
        'Honk! Honk!'
      end


end# Owl.rb | Defines the Owl class which inherits attributes and methods
#   from the Bird superclass.
#### Begun by: Prof. Adams, for CS 214 at Calvin College.
## Completed by: Justin Voss
## Date: 03/24/22
#########################################################

require './Bird.rb'
require './FlyingBird.rb'
class Owl < FlyingBird
    def call
        'Hoo! Hoo!'
      end

end]0;jav86@gold29: ~/CS214/projects/10/ruby[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/10/ruby[00m$ [Kruby birds.rb

Welcome to the Bird Park!

Hawkeye Bird ran and said Squaaaaaaawk!
Donald Duck flew and said QUAAAACK!
Mother Goose flew and said Honk! Honk!
Woodsey Owl flew and said Hoo! Hoo!
Ozzie Ostrich walked and said WAHHHHH!
Pingu Penguin walked and said NOOT NOOT!
Ninja Kiwi walked and said KIII! KIII!


]0;jav86@gold29: ~/CS214/projects/10/ruby[01;32mjav86@gold29[00m:[01;34m~/CS214/projects/10/ruby[00m$ exit

Script done on 2022-03-24 15:39:49-04:00 [COMMAND_EXIT_CODE="0"]
