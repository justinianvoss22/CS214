Script started on 2022-03-09 11:36:02-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;jav86@remotel3: ~/CS214/projects/08[01;32mjav86@remotel3[00m:[01;34m~/CS214/projects/08[00m$ cat NameTester.java
/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: Justin Voss
 * Date: 3/10/22
 ************************************************************/
import java.io.*;
import java.util.Scanner;

public class NameTester  
{
  public static void main(String[] args)
  {
      Name aName = new Name("John", "Paul", "Jones");
//
      assert aName.getFirst().equals("John") ;
      assert aName.getMiddle().equals("Paul") ;
      assert aName.getLast().equals("Jones") ;
//
      System.out.println(aName);
      assert aName.toString().equals("John Paul Jones");


      // testing the mutators
      aName.setFirst("Chris");
      assert aName.getFirst().equals("Chris") ;

      aName.setMiddle("Robert");
      assert aName.getMiddle().equals("Robert") ;

      aName.setLast("Evans");
      assert aName.getLast().equals("Evans") ;
      System.out.println(aName);

      // testing the LFMI
      assert aName.lfmi().equals("Evans, Chris R");

      System.out.println("All tests passed!");

      // taking user input
      System.out.println("Enter a person's first, middle and last name:");
      aName.read();
      System.out.println(aName);

  }

}
  class Name
  {
     private String myFirst,
                    myMiddle,
                    myLast;

    public Name(String first, String middle, String last)
    {
        myFirst = first;
        myMiddle = middle;
        myLast = last;
    }

    public String getFirst()
   {
      return myFirst;
   }

   public String getMiddle()
   {
      return myMiddle;
   }

   public String getLast()
   {
      return myLast;
   }

   public String toString()
   {
      return myFirst + ' ' + myMiddle + ' ' + myLast;
   }
   // sets the first name
   void setFirst(String first)
   {
      myFirst = first;
   }
   // sets the middle name
   void setMiddle(String middle)
   {
      myMiddle = middle;
   }
   // sets the last name
   void setLast(String last)
   {
      myLast = last;
   }

   // this function puts the name in last, first, middle initial order
   String lfmi() 
   {
      return myLast + ", " + myFirst + " " + myMiddle.charAt(0); // charAt gets the character at an indexed location
   }

   // creates a new scanner for user input
   Scanner input = new Scanner(System.in);

   // this function reads user input and puts it into the name variables
   void read()
   {
      myFirst = input.nextLine(); // next line gets the next line of the user input
      myMiddle = input.nextLine();
      myLast = input.nextLine();
   }

  };


]0;jav86@remotel3: ~/CS214/projects/08[01;32mjav86@remotel3[00m:[01;34m~/CS214/projects/08[00m$ make java
javac -deprecation NameTester.java
]0;jav86@remotel3: ~/CS214/projects/08[01;32mjav86@remotel3[00m:[01;34m~/CS214/projects/08[00m$ java NameTester
John Paul Jones
Chris Robert Evans
All tests passed!
Enter a person's first, middle and last name:
Justin      Justin
Andrew
Voss
Justin Andrew Voss
]0;jav86@remotel3: ~/CS214/projects/08[01;32mjav86@remotel3[00m:[01;34m~/CS214/projects/08[00m$ exit

Script done on 2022-03-09 11:36:34-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-10 12:49:23-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;jav86@gold20: ~/CS214/projects/08[01;32mjav86@gold20[00m:[01;34m~/CS214/projects/08[00m$ cat name_tewt  seter.adb        ter.adb
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by: Justin Voss
-- Date: 3/10/22
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is

NAME_SIZE : Constant Integer := 8;

type Name is
  record
    MyFirst : String(1..Name_Size);
    MyMiddle : String(1..Name_Size);
    MyLast : String(1..Name_Size);
  end record;


  aName : Name ;


  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: theName, the Name variable;      -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------

  -- replace this line with the definition of Init()
  procedure Init (TheName : out Name; First, Middle, Last : in String) is
  begin
    TheName.MyFirst := First;
    TheName.MyMiddle := Middle;
    TheName.MyLast := Last;
  end Init;

  ----------------------------------------------
  -- getFirst(Name) retrieves Name.myFirst        -
  -- Receive: theName, a Name.                 -
  -- PRE: theName has been initialized.        -
  -- Return: theName.myFirst.                  -
  ----------------------------------------------

  function getFirst(TheName : in Name) return String is
   begin
      return TheName.MyFirst;
   end getFirst;


  function getMiddle(TheName : in Name) return String is
   begin
      return TheName.MyMiddle;
   end getMiddle;


  function getLast(TheName : in Name) return String is
   begin
      return TheName.MyLast;
   end getLast;

   -- sets the name of a myFirst
   procedure setFirst(First : in String; TheName : out Name) is
   begin
     TheName.myFirst := First;
   end setFirst;

   -- sets the name of a myMiddle
    procedure setMiddle(Middle : in String; TheName : out Name) is
   begin
     TheName.myMiddle := Middle;
   end setMiddle;

   -- sets the name of a myLast
    procedure setLast(Last : in String; TheName : out Name) is
   begin
     TheName.myLast := Last;
   end setLast;


  -----------------------------------------------
  -- getFullName(Name) retrieves Name as a String  -
  -- Receive: theName, a Name.                  -
  -- PRE: theName has been initialized.         -
  -- Return: a String representation of theName -
  -----------------------------------------------

  function getFullName(TheName : in Name) return String is
   begin
      return TheName.MyFirst & " " & TheName.MyMiddle & " " & TheName.MyLast;
   end getFullName;

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  -- Output: theName, to the screen.           -
  ----------------------------------------------
  procedure Put(TheName : in Name) is
   begin
   -- outputs the name
      Put(TheName.MyFirst & " " & TheName.MyMiddle & " " & TheName.MyLast);
   end Put;


----------------------------------------------
  --lfmi(Name) puts the name in first, last, middle initial form       -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.   
  -- Output: the name in the lfmi form.              -
  ----------------------------------------------
function lfmi(TheName : in Name) return String is
   begin
    -- The_Name.Middle'First accesses the first character of the middle
      return TheName.MyLast & ", " & TheName.MyFirst & TheName.MyMiddle(TheName.MyMiddle'First) & ".";
   end lfmi;


   ----------------------------------------------
  -- Read(Name) takes user input and puts it into a first, middle, and last name         -
  -- PRE: theName has been initialized.        -
  -- Receive: theName, a Name.                 -
  ----------------------------------------------
  procedure Read(TheName : in out Name) is
   -- makes word with proper length
   word : String := "        ";
   -- natural number to keep track of the current char
   begin
      -- gets the words from user
      Get(word);
      TheName.MyFirst := word;
      Get(word);
      TheName.MyMiddle := word;
      Get(word);
      TheName.MyLast := word;
   end Read;
  


begin
   Init(aName, "John    ", "Paul    ", "Jones   ");

   pragma Assert( getFirst(aName) = "John    ", "getFirst() failed");
   pragma Assert( getMiddle(aName) = "Paul    ", "getMiddle() failed");
   pragma Assert( getLast(aName) = "Jones   ", "getLast() failed");
   pragma Assert( getFullName(aName) = "John     Paul     Jones   ", 
                    "getFullName() failed");

   Put(aName); New_line;

   -- testing mutator functions
   setFirst("Chris   ", aName);
   pragma Assert( getFirst(aName) = "Chris   ", "getFirst() failed");
   setMiddle("Robert  ", aName);
   pragma Assert( getMiddle(aName) = "Robert  ", "getMiddle() failed");
   setLast("Evans   ", aName);
   pragma Assert( getLast(aName) = "Evans   ", "getLast() failed");
   pragma Assert( getFullName(aName) = "Chris    Robert   Evans   ", 
                    "getFullName() failed");

   -- testing lfmi
   Put("Should produce:"); New_line;
   Put("Chris   , Evans   R."); New_line;
   Put("Produces: "); New_line;
   Put(lfmi(aName)); New_line;
   pragma Assert( lfmi(aName) = "Evans   , Chris   R.", "lfmi() failed");

   -- testing the read function
   Put(aName); New_line;
   Put("Enter a first, middle, and last name: "); New_line;
   Read(aName);
   Put(aName); New_line;
   Put(aName); New_line;

   

   Put("All tests passed!"); New_line;

end name_tester;

]0;jav86@gold20: ~/CS214/projects/08[01;32mjav86@gold20[00m:[01;34m~/CS214/projects/08[00m$ adsf    make ada
gnatmake name_tester -gnata
x86_64-linux-gnu-gcc-7 -c -gnata name_tester.adb
x86_64-linux-gnu-gnatbind-7 -x name_tester.ali
x86_64-linux-gnu-gnatlink-7 name_tester.ali
]0;jav86@gold20: ~/CS214/projects/08[01;32mjav86@gold20[00m:[01;34m~/CS214/projects/08[00m$ ./name_tet ster
John     Paul     Jones   
Should produce:
Chris   , Evans   R.
Produces: 
Evans   , Chris   R.
Chris    Robert   Evans   
Enter a first, middle, and last name: 
Justin   
Andrew   
Voss   
Justin    Andrew    Voss  
Justin    Andrew    Voss  
All tests passed!
]0;jav86@gold20: ~/CS214/projects/08[01;32mjav86@gold20[00m:[01;34m~/CS214/projects/08[00m$ exit

Script done on 2022-03-10 12:50:49-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-10 13:32:15-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
]0;jav86@gold20: ~/CS214/projects/08/clojure[01;32mjav86@gold20[00m:[01;34m~/CS214/projects/08/clojure[00m$ cd src
]0;jav86@gold20: ~/CS214/projects/08/clojure/src[01;32mjav86@gold20[00m:[01;34m~/CS214/projects/08/clojure/src[00m$ cat nameTester.clj
;;;; nameTester.clj creates and tests a clojure Name type.
;;;;
;;;; Output: results of testing Name functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Completed by: Justin Voss
;;;; Date: 3/10/22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)   ; program name

;;; define a Clojure record named Name 
;;; (which compiles to a Java class).

(defrecord Name [firstName middleName lastName] )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-Name constructs a Name from three strings. 
;;; Receive: firstN, middleN and lastN, three strings.
;;; Return: the Name (firstN middleN lastN). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn make-Name [first middle last]
  (->Name first middle last)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFirst() extracts the first name of a Name object.
;;; Receive: aName, a Name.
;;; Return: the firstName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn getFirst [^Name aName]
  (:firstName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getMiddle() extracts the middle name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the middleName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn getMiddle [^Name aName]
  (:middleName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getLast() extracts the last name of a name object.
;;; Receive: aName, a Name. 
;;; Return: the lastName string in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn getLast [^Name aName]
  (:lastName aName)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setFirst() sets the first name of a name object.
;;; Receive: aName, a Name. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn setFirst [^Name aName first]
  ;; puts the first name as the first name given by the parameter
  (->Name first (:middleName aName) (:lastName aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setMiddle() sets the middle name of a name object.
;;; Receive: aName, a Name. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn setMiddle [^Name aName middle]
;; puts the middle name as the middle name given by the parameter
  (->Name (:firstName aName) middle (:lastName aName))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setLast() sets the last name of a name object.
;;; Receive: aName, a Name. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; puts the last name as the last name given by the parameter
(defn setLast [^Name aName last]
  (->Name (:firstName aName) (:middleName aName) last)
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getFullName() returns a full name in F-M-L order. 
;;; Receive: aName, a Name. 
;;; Return: firstName, middleName, lastName,
;;;           separated by spaces. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toString [^Name aName]
; concatonates the whole name together
  (str (getFirst aName) " " (getMiddle aName) " " (getLast aName))
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; printName() displays a name object.
;;; Receive: aName, a Name.
;;; Output: the strings in aName.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn printName [^Name aName]
  (print (toString aName)) ;; prints the string
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lfmi() displays a name object in last first middle initial format.
;;; Receive: aName, a Name.
;;; Output: the name in lfmi format
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn lfmi [^Name aName]
  ;; puts the lfmi all in a big string
  (str (getLast aName) ", " (getFirst aName) " " (first (getMiddle aName)) ".")
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; read() reads user input and puts it into first, middle last names
;;; Receive: aName, a Name.
;;; Output: the name in lfmi format
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
(defn readName []

  (let [
    first (read)
    middle (read)
    last (read)
  ]
    (make-Name first middle last)
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Name functions. 
;;; Output: the result of testing our Name functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [                                          ; 3 ways to construct an object:
      name1 (make-Name "John" "Paul" "Jones")  ; -using our "make-" constructor
      name2 (->Name "Jane" "Penelope" "Jones") ; -invoking constructor directly
                                               ; -mapping field-names to values
      name3 (map->Name {:lastName "Jones" :firstName "Jinx" :middleName "Joy"})
    ]
    ;; ----- SECTION 1 -----
    (println)
    (print name1) (println)
    (assert (= (getFirst name1) "John") "getFirst(1) failed")
    (assert (= (getMiddle name1) "Paul") "getMiddle(1) failed")
    (assert (= (getLast name1) "Jones") "getLast(1) failed")
    (assert (= (toString name1) "John Paul Jones") "toString(1) failed")
    (printName name1) (println)
    ;; ----- SECTION 2 -----
    (println)
    (print name2) (println)
    (assert (= (getFirst name2) "Jane") "getFirst(2) failed")
    (assert (= (getMiddle name2) "Penelope") "getMiddle(2) failed")
    (assert (= (getLast name2) "Jones") "getLast(2) failed")
    (assert (= (toString name2) "Jane Penelope Jones") "toString(2) failed")
    (printName name2) (println)
    ;; ----- SECTION 3 -----
    (println)
    (print name3) (println)
    (assert (= (getFirst name3) "Jinx") "getFirst(3) failed")
    (assert (= (getMiddle name3) "Joy") "getMiddle(3) failed")
    (assert (= (getLast name3) "Jones") "getLast(3) failed")
    (assert (= (toString name3) "Jinx Joy Jones") "toString(3) failed")
    (printName name3) (println)
    ;; ----- SECTION 4 -----
    ;; testing mutator functions
    (let
    [                                          ; 3 ways to construct an object:
      ;; make 3 variables with names to set to a name object
      firstName2 "Chris"
      middleName2 "Robert"
      lastName2 "Evans"


      ;; set them to name objects
      name4 (setFirst name1 firstName2)
      name5 (setMiddle name1 middleName2)
      name6 (setLast name1 lastName2)

      name7 (make-Name firstName2 middleName2 lastName2)
    ]
    ;; check if the names were changed by using get methods
    (assert (= (getFirst name4) "Chris") "getFirst(3) failed")
    (assert (= (getMiddle name5) "Robert") "getMiddle(3) failed")
    (assert (= (getLast name6) "Evans") "getLast(3) failed")
    (println)

    ;; check lfmi function
    (println (lfmi name7))
    (assert (= (lfmi name7) (str lastName2 ", " firstName2 " " (first middleName2) ".")) "lfmi() failed")

    (println "\nAll tests passed!\n")

  ;; testing read function
    (println "Enter first, middle, and last name: ")
  ;; makes a variable name8 assigned to a user inputted name
    (let [name8 (readName)]
    ;; print out the name
      (printName name8) (println)
      )
    )
  )
)

]0;jav86@gold20: ~/CS214/projects/08/clojure/src[01;32mjav86@gold20[00m:[01;34m~/CS214/projects/08/clojure/src[00m$ c  d ..
]0;jav86@gold20: ~/CS214/projects/08/clojure[01;32mjav86@gold20[00m:[01;34m~/CS214/projects/08/clojure[00m$ clojure -m nameTeseter    ter

#nameTester.Name{:firstName John, :middleName Paul, :lastName Jones}
John Paul Jones

#nameTester.Name{:firstName Jane, :middleName Penelope, :lastName Jones}
Jane Penelope Jones

#nameTester.Name{:firstName Jinx, :middleName Joy, :lastName Jones}
Jinx Joy Jones

Evans, Chris R.

All tests passed!

Enter first, middle, and last name: 
Justin
Andrew
Voss
Justin Andrew Voss
]0;jav86@gold20: ~/CS214/projects/08/clojure[01;32mjav86@gold20[00m:[01;34m~/CS214/projects/08/clojure[00m$ exit

Script done on 2022-03-10 13:32:42-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2022-03-10 14:08:57-05:00 [TERM="xterm-256color" TTY="/dev/pts/2" COLUMNS="80" LINES="24"]
]0;jav86@gold20: ~/CS214/projects/08[01;32mjav86@gold20[00m:[01;34m~/CS214/projects/08[00m$ cat NameTester.rb
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: Justin Voss
# Date: 3/10/22
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions



class Name 
   # This function initializes the first, middle, and last names
   def initialize(first, middle, last)
      @first, @middle, @last = first, middle, last
    end

    # accessor method. By changing this to attr_accessor, it is now used for reading and writing
    attr_accessor :first, :middle, :last



    # This function concatenates the 3 parts of the name together
    def fullName
      @first + " " + @middle + " " + @last
    end

    # This function prints the name
    def print
      puts fullName # prints out the name
      fullName
    end

    # lfmi puts the name in last, first, middle initial format
    def lfmi
      return @last + ", " + @first + " " + @middle[0] + "."
    end

    # This function reads first, middle, last name from user input 
    def readName
      # gets.chomp gets a user inputted word
      @first = gets.chomp
      @middle = gets.chomp
      @last = gets.chomp
    end
end


def testName
   name = Name.new("John", "Paul", "Jones")

   assert name.first == "John", "first failed"
   assert name.middle == "Paul", "middle failed"
   assert name.last == "Jones", "last failed"
   assert name.fullName == "John Paul Jones", "fullName failed"
   assert name.print == "John Paul Jones", "print failed"

  # Testing Mutators
  name.first = "Chris"
  assert name.first == "Chris", "first failed"
  name.middle = "Robert"
  assert name.middle == "Robert", "first failed"
  name.last = "Evans"
  assert name.last == "Evans", "first failed"
  name.print
# Testing lfmi()
  puts name.lfmi
  assert name.lfmi == "Evans, Chris R.", "lfmi failed"
  print "All tests passed!\n"

  puts "Enter a first, middle, and last name: \n"
  name.readName
  name.print
end

testName

]0;jav86@gold20: ~/CS214/projects/08[01;32mjav86@gold20[00m:[01;34m~/CS214/projects/08[00m$ ruby NamTeseter       eTeseter    ter.rb
John Paul Jones
Chris Robert Evans
Evans, Chris R.
All tests passed!
Enter a first, middle, and last name: 
Justin
Andrew
Voss
Justin Andrew Voss
]0;jav86@gold20: ~/CS214/projects/08[01;32mjav86@gold20[00m:[01;34m~/CS214/projects/08[00m$ exit

Script done on 2022-03-10 14:09:30-05:00 [COMMAND_EXIT_CODE="0"]
